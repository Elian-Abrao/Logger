import logging
from logging import Logger, Formatter, StreamHandler, FileHandler
from logger.handlers import ProgressStreamHandler
from pathlib import Path
from datetime import datetime
from colorama import init
import os
from logger.formatters.custom import CustomFormatter, AutomaticTracebackLogger, _define_custom_levels
import sys
from logger.core.context import _setup_context_and_profiling
from logger.extras.progress import format_block, logger_progress, combine_blocks
from logger.extras.network import _setup_dependencies_and_network
from logger.extras.printing import logger_capture_prints
import time
from contextlib import contextmanager
from typing import Optional, Dict, List, Tuple, Any, Callable
from collections import defaultdict
import psutil
import gc
import pkg_resources
import platform
import socket
import requests
from urllib.parse import urlparse
from concurrent.futures import ThreadPoolExecutor
from wcwidth import wcswidth

try:
    import pyautogui
except Exception:
    pyautogui = None

# Inicializa o m√≥dulo colorama para permitir a exibi√ß√£o de cores no console do Windows.
# O par√¢metro autoreset=True garante que as cores sejam resetadas automaticamente ap√≥s cada uso.
def _init_colorama():
    init(autoreset=True)


def _log_start(self: Logger, verbose: int = 1, timeout: float = 1.0):
    """
    Registra o in√≠cio de um processo com informa√ß√µes detalhadas do ambiente.
    
    Args:
        verbose (int): N√≠vel de detalhes a apresentar:
            1 = Banner + sistema e ambiente (padr√£o)
            2 = Banner + sistema, ambiente e m√©tricas iniciais
        timeout (float): Timeout em segundos para opera√ß√µes de rede (padr√£o: 1.0)
    """
    folder = Path(os.getcwd()).name
    script = Path(sys.argv[0]).name
    now = datetime.now()
    data = now.strftime('%d/%m/%Y')
    hora = now.strftime('%H:%M:%S')
    
    linhas = [
        "üöÄ PROCESSO INICIADO",
        f"Data: {data} ‚Ä¢ Hora: {hora}",
        f"Script: {script} ‚Ä¢ Pasta: {folder}"
    ]
    banner = format_block("üö¶IN√çCIO", linhas)

    blocks = [banner]

    # Reseta m√©tricas para come√ßar do zero (r√°pido e √∫til sempre)
    if verbose >= 1:
        self.reset_metrics()
    
    # Informa√ß√µes adicionais baseadas no n√≠vel verbose
    if verbose >= 1:
        status_block = self.log_system_status(return_block=True)
        env_block = self.log_environment(return_block=True)
        blocks.extend([status_block, env_block])
    
    if verbose >= 2:
        # Snapshot de mem√≥ria (pode ser pesado em sistemas grandes)
        self.debug("Registrando snapshot inicial de mem√≥ria...")
        self.memory_snapshot()

    banner_final = combine_blocks(blocks)
    self.success(f"\n{banner_final}")


def _log_end(self: Logger, verbose: int = 1, timeout: float = 1.0):
    """
    Registra o t√©rmino de um processo com informa√ß√µes detalhadas.
    
    Args:
        verbose (int): N√≠vel de detalhes a apresentar:
            0 = Apenas banner de fim
            1 = Banner + status do sistema (padr√£o)
            2 = Banner + status do sistema + relat√≥rio completo de m√©tricas
        timeout (float): Timeout em segundos para opera√ß√µes de rede (padr√£o: 1.0)
    """
    folder = Path(os.getcwd()).name
    script = Path(sys.argv[0]).name
    now = datetime.now()
    data = now.strftime('%d/%m/%Y')
    hora = now.strftime('%H:%M:%S')
    
    # Informa√ß√µes adicionais baseadas no n√≠vel verbose
    if verbose >= 2:
        # Gera o relat√≥rio de m√©tricas (opera√ß√£o leve)
        self.report_metrics()
        
        # Verifica vazamentos de mem√≥ria (pode ser pesado em sistemas grandes)
        self.debug("Verificando poss√≠veis vazamentos de mem√≥ria...")
        self.check_memory_leak()
    
    blocks = []
    if verbose >= 1:
        status_block = self.log_system_status(return_block=True)
        blocks.append(status_block)
    
    # Banner de finaliza√ß√£o
    linhas = [
        "üèÅ PROCESSO FINALIZADO",
        f"Data: {data} ‚Ä¢ Hora: {hora}",
        f"Script: {script} ‚Ä¢ Pasta: {folder}"
    ]
    banner = format_block("üèÅ FIM", linhas)
    blocks.insert(0, banner)
    banner_final = combine_blocks(blocks)
    self.success(f"\n{banner_final}")

def _setup_directories(base_dir: Path):
    """
    Cria e configura a estrutura de diret√≥rios necess√°ria para o sistema de logging.
    
    Par√¢metros:
        base_dir (Path): Diret√≥rio base onde os logs ser√£o armazenados
    
    Cria os seguintes diret√≥rios:
    - Logs: Diret√≥rio principal para todos os logs
    - LogsDEBUG: Diret√≥rio para logs completos de depura√ß√£o
    - PrintScreens: Diret√≥rio para armazenar capturas de tela
    
    Retorna:
        tuple: (screen_dir, debug_dir) - Paths para os diret√≥rios criados
    """
    screen_dir = base_dir / 'PrintScreens'
    debug_dir  = base_dir / 'LogsDEBUG'
    base_dir.mkdir(parents=True, exist_ok=True)
    screen_dir.mkdir(parents=True, exist_ok=True)
    debug_dir.mkdir(parents=True, exist_ok=True)
    return screen_dir, debug_dir

def _get_log_filename(name: str) -> str:
    """
    Gera um nome de arquivo de log √∫nico com timestamp.
    
    Par√¢metros:
        name (str): Nome base para o arquivo de log
    
    Retorna:
        str: Nome do arquivo no formato '<name> - DD-MM-YYYY HH-MM-SS.log'
             Se name n√£o for fornecido, usa 'log' como padr√£o
    """
    ts = datetime.now().strftime('%d-%m-%Y %H-%M-%S')
    return f"{name or 'log'} - {ts}.log"

def _attach_screenshot(logger: Logger, name: str, screen_dir: Path, webdriver=None):
    """
    Captura e salva uma screenshot do sistema ou navegador.
    
    Par√¢metros:
        logger (Logger): Inst√¢ncia do logger para registrar o processo
        name (str): Nome base para o arquivo de screenshot
        screen_dir (Path): Diret√≥rio onde as screenshots ser√£o salvas
        webdriver (WebDriver, opcional): Inst√¢ncia do Selenium WebDriver para capturas do navegador
    
    Comportamento:
    - Tenta primeiro usar o webdriver se fornecido (para capturas do navegador)
    - Se n√£o houver webdriver ou falhar, tenta usar pyautogui (para capturas do sistema)
    - Registra sucesso ou falha no log
    - Gera nome √∫nico com timestamp para cada arquivo
    """
    ts = datetime.now().strftime('%d-%m-%Y_%H-%M-%S')
    path = screen_dir / f"{name}_{ts}.png"
    if webdriver:
        try:
            webdriver.save_screenshot(str(path))
            logger.debug(f"Screenshot via webdriver salva em {path}")
        except:
            logger.warning(f"Falha ao capturar screenshot via webdriver: {path}")
    elif pyautogui:
        try:
            pyautogui.screenshot().save(path)
            logger.debug(f"Screenshot via pyautogui salva em {path}")
        except:
            logger.warning(f"Falha ao capturar screenshot via pyautogui: {path}")

class MetricsManager:
    """
    Gerenciador de m√©tricas para rastreamento de tempo de execu√ß√£o e contadores.
    
    Caracter√≠sticas:
    - Rastreamento de tempo de execu√ß√£o de blocos de c√≥digo
    - Contadores personalizados
    - Estat√≠sticas de execu√ß√£o
    - Relat√≥rios formatados
    """
    def __init__(self):
        self.timers: Dict[str, List[float]] = defaultdict(list)
        self.counters: Dict[str, int] = defaultdict(int)
        self._active_timers: Dict[str, float] = {}

    def add_execution_time(self, name: str, time_taken: float) -> None:
        """
        Adiciona um tempo de execu√ß√£o para uma m√©trica espec√≠fica.
        
        Args:
            name: Nome da m√©trica
            time_taken: Tempo de execu√ß√£o em segundos
        """
        self.timers[name].append(time_taken)
    
    def increment_counter(self, name: str, value: int = 1) -> None:
        """
        Incrementa um contador espec√≠fico.
        
        Args:
            name: Nome do contador
            value: Valor a incrementar (padr√£o: 1)
        """
        self.counters[name] += value
    
    def get_statistics(self, name: str) -> Dict[str, float]:
        """
        Retorna estat√≠sticas para uma m√©trica espec√≠fica.
        
        Args:
            name: Nome da m√©trica
            
        Returns:
            Dicion√°rio contendo estat√≠sticas (count, total_time, average_time, min_time, max_time)
        """
        times = self.timers.get(name, [])
        if not times:
            return {}
        return {
            'count': len(times),
            'total_time': sum(times),
            'average_time': sum(times) / len(times),
            'min_time': min(times),
            'max_time': max(times)
        }
    
    def get_counter(self, name: str) -> int:
        """
        Retorna o valor de um contador espec√≠fico.
        
        Args:
            name: Nome do contador
            
        Returns:
            Valor atual do contador
        """
        return self.counters.get(name, 0)
    
    def reset(self) -> None:
        """
        Reseta todas as m√©tricas.
        """
        self.timers.clear()
        self.counters.clear()
        self._active_timers.clear()

    def format_report(self) -> str:
        """
        Gera um relat√≥rio formatado com todas as m√©tricas.
        
        Returns:
            Relat√≥rio formatado como string
        """
        lines = ['=== Relat√≥rio de M√©tricas ===']
        
        if self.timers:
            lines.append('\n--- Temporizadores ---')
            for name, times in self.timers.items():
                stats = self.get_statistics(name)
                lines.append(f"\n{name}:")
                lines.append(f"  Execu√ß√µes: {stats['count']}")
                lines.append(f"  Tempo Total: {stats['total_time']:.3f}s")
                lines.append(f"  M√©dia: {stats['average_time']:.3f}s")
                lines.append(f"  Min: {stats['min_time']:.3f}s")
                lines.append(f"  Max: {stats['max_time']:.3f}s")
        
        if self.counters:
            lines.append('\n--- Contadores ---')
            for name, value in self.counters.items():
                lines.append(f"{name}: {value}")
        
        return '\n'.join(lines)

# Fun√ß√µes de m√©tricas para o logger
@contextmanager
def logger_timer(self: Logger, name: str, level: str = 'DEBUG') -> None:
    """
    Context manager para medir tempo de execu√ß√£o de um bloco de c√≥digo.
    
    Args:
        name: Nome da m√©trica de tempo
        level: N√≠vel de log para o resultado (padr√£o: DEBUG)
        
    Exemplo:
        with logger.timer('operacao_importante'):
            # c√≥digo a ser medido
    """
    start_time = time.time()
    try:
        yield
    finally:
        elapsed = time.time() - start_time
        self._metrics.add_execution_time(name, elapsed)
        log_method = getattr(self, level.lower())
        log_method(f"[‚è±Ô∏è {name}] Tempo de execu√ß√£o: {elapsed:.3f}s")

def logger_count(self: Logger, name: str, value: int = 1, level: str = 'DEBUG') -> None:
    """
    Incrementa um contador e registra no log.
    
    Args:
        name: Nome do contador
        value: Valor a incrementar (padr√£o: 1)
        level: N√≠vel de log para o resultado (padr√£o: DEBUG)
    
    Exemplo:
        logger.count('eventos_processados')
    """
    self._metrics.increment_counter(name, value)
    log_method = getattr(self, level.lower())
    log_method(f"[üìä {name}] Contador: {self._metrics.get_counter(name)}")

def logger_report_metrics(self: Logger, level: str = 'INFO') -> None:
    """
    Gera e registra um relat√≥rio completo de m√©tricas.
    
    Args:
        level: N√≠vel de log para o relat√≥rio (padr√£o: INFO)
    
    Exemplo:
        logger.report_metrics()
    """
    # Obt√©m as m√©tricas do gerenciador
    metrics = self._metrics
    log_method = getattr(self, level.lower())
    
    linhas = []
    
    # Formata os temporizadores
    if metrics.timers:
        linhas.append("‚è±Ô∏è TEMPORIZADORES:")
        for name, times in metrics.timers.items():
            stats = metrics.get_statistics(name)
            linhas.append(f"  {name}:")
            linhas.append(f"    Execu√ß√µes: {stats['count']} ‚Ä¢ Tempo total: {stats['total_time']:.3f}s")
            linhas.append(f"    M√©dia: {stats['average_time']:.3f}s ‚Ä¢ Min: {stats['min_time']:.3f}s ‚Ä¢ Max: {stats['max_time']:.3f}s")
    
    # Formata os contadores
    if metrics.counters:
        if metrics.timers:  # Adiciona linha em branco se tamb√©m tiver temporizadores
            linhas.append("")
        linhas.append("üìä CONTADORES:")
        for name, value in metrics.counters.items():
            linhas.append(f"  {name}: {value}")
    
    # Se n√£o houver m√©tricas, adiciona mensagem informativa
    if not metrics.timers and not metrics.counters:
        linhas.append("Nenhuma m√©trica registrada.")
    
    # Formata o bloco completo
    bloco = format_block("üìä RELAT√ìRIO DE M√âTRICAS", linhas)
    log_method(f"\n{bloco}")

def logger_reset_metrics(self: Logger) -> None:
    """
    Reseta todas as m√©tricas acumuladas.
    
    Exemplo:
        logger.reset_metrics()
    """
    self._metrics.reset()
    self.debug("M√©tricas resetadas")

def _setup_metrics(logger: Logger) -> None:
    """
    Configura o sistema de m√©tricas no logger.
    
    Args:
        logger: Inst√¢ncia do logger a ser configurada
    """
    metrics = MetricsManager()
    setattr(logger, '_metrics', metrics)
    
    # Adiciona os m√©todos ao logger
    setattr(Logger, 'timer', logger_timer)
    setattr(Logger, 'count', logger_count)
    setattr(Logger, 'report_metrics', logger_report_metrics)
    setattr(Logger, 'reset_metrics', logger_reset_metrics)

class SystemMonitor:
    """
    Monitor de recursos do sistema e mem√≥ria.
    
    Caracter√≠sticas:
    - Monitoramento de uso de CPU
    - Monitoramento de mem√≥ria
    - Contagem de objetos Python
    - Detec√ß√£o de vazamentos de mem√≥ria
    """
    def __init__(self):
        self.process = psutil.Process()
        self._baseline_memory: Optional[float] = None
        self._object_counts: Optional[Dict[str, int]] = None
    
    def get_memory_usage(self) -> Tuple[float, float]:
        """
        Retorna uso de mem√≥ria (MB) do processo e do sistema.
        
        Returns:
            Tupla contendo (mem√≥ria_do_processo_MB, percentual_de_mem√≥ria_do_sistema)
        """
        process_memory = self.process.memory_info().rss / 1024 / 1024
        system_memory = psutil.virtual_memory().percent
        return process_memory, system_memory
    
    def get_cpu_usage(self) -> Tuple[float, float]:
        """
        Retorna uso de CPU (%) do processo e do sistema.
        
        Returns:
            Tupla contendo (cpu_do_processo_percentual, cpu_do_sistema_percentual)
        """
        process_cpu = self.process.cpu_percent()
        system_cpu = psutil.cpu_percent()
        return process_cpu, system_cpu
    
    def take_memory_snapshot(self) -> None:
        """
        Registra estado atual da mem√≥ria como baseline.
        """
        gc.collect()
        self._baseline_memory = self.get_memory_usage()[0]
        self._object_counts = self._count_objects()
    
    def _count_objects(self) -> Dict[str, int]:
        """
        Conta objetos Python por tipo.
        
        Returns:
            Dicion√°rio com contagem de objetos por tipo
        """
        return {str(type(obj).__name__): len([o for o in gc.get_objects() if type(o) is type(obj)])
                for obj in gc.get_objects()}
    
    def get_memory_diff(self) -> Tuple[float, Dict[str, int]]:
        """
        Retorna diferen√ßa de mem√≥ria e objetos desde o √∫ltimo snapshot.
        
        Returns:
            Tupla contendo (diferen√ßa_de_mem√≥ria_MB, dicion√°rio_com_diferen√ßas_de_objetos)
        """
        if self._baseline_memory is None:
            return 0.0, {}
        
        current_memory = self.get_memory_usage()[0]
        memory_diff = current_memory - self._baseline_memory
        
        current_counts = self._count_objects()
        object_diff = {
            name: current_counts.get(name, 0) - self._object_counts.get(name, 0)
            for name in set(current_counts) | set(self._object_counts or {})
            if current_counts.get(name, 0) != self._object_counts.get(name, 0)
        }
        
        return memory_diff, object_diff


# Fun√ß√µes de monitoramento para o logger
def logger_log_system_status(self: Logger, level: str = 'INFO', return_block: bool = False) -> str | None:
    proc_mem, sys_mem = self._monitor.get_memory_usage()
    proc_cpu, sys_cpu = self._monitor.get_cpu_usage()
    
    linhas = [
        f"üíª CPU: Processo {proc_cpu:.1f}% ‚Ä¢ Sistema: {sys_cpu:.1f}%",
        f"üíæ Mem√≥ria: {proc_mem:.1f}MB ‚Ä¢ Sistema: {sys_mem:.1f}%"
    ]
    bloco = format_block("üß† STATUS DO SISTEMA", linhas)

    if return_block:
        return bloco

    getattr(self, level.lower())(f"\n{bloco}")

def logger_memory_snapshot(self: Logger) -> None:
    """
    Registra snapshot da mem√≥ria atual para compara√ß√£o posterior.
    
    Exemplo:
        logger.memory_snapshot()
    """
    self._monitor.take_memory_snapshot()
    self.debug("Snapshot de mem√≥ria registrado")

def logger_check_memory_leak(self: Logger, level: str = 'WARNING') -> None:
    """
    Verifica diferen√ßas de mem√≥ria desde o √∫ltimo snapshot.
    
    Args:
        level: N√≠vel de log para avisos de vazamento (padr√£o: WARNING)
    
    Exemplo:
        logger.check_memory_leak()
    """
    memory_diff, object_diff = self._monitor.get_memory_diff()
    
    if not memory_diff and not object_diff:
        self.debug("Nenhum vazamento de mem√≥ria detectado")
        return
    
    log_method = getattr(self, level.lower())
    message = [f"‚ö†Ô∏è Poss√≠vel vazamento de mem√≥ria detectado: {memory_diff:.1f}MB"]
    
    if object_diff:
        message.append("\nMudan√ßas nos objetos:")
        for obj_type, diff in object_diff.items():
            if abs(diff) > 10:  # Reporta apenas diferen√ßas significativas
                message.append(f"  {obj_type}: {diff:+d}")
    
    log_method('\n'.join(message))

def _setup_monitoring(logger: Logger) -> None:
    """
    Configura o sistema de monitoramento no logger.
    
    Args:
        logger: Inst√¢ncia do logger a ser configurada
    """
    monitor = SystemMonitor()
    setattr(logger, '_monitor', monitor)
    
    # Adiciona os m√©todos ao logger
    setattr(Logger, 'log_system_status', logger_log_system_status)
    setattr(Logger, 'memory_snapshot', logger_memory_snapshot)
    setattr(Logger, 'check_memory_leak', logger_check_memory_leak)

class DependencyManager:
    """
    Gerenciador de informa√ß√µes sobre depend√™ncias e ambiente de execu√ß√£o.
    Coleta e formata informa√ß√µes sobre pacotes instalados e sistema.
    """
    def __init__(self):
        self._cached_info: Optional[Dict[str, Any]] = None
        self._last_update: float = 0
        self._cache_duration: int = 300  # 5 minutos
    
    def get_environment_info(self, force_update: bool = False) -> Dict[str, Any]:
        """
        Coleta informa√ß√µes sobre o ambiente de execu√ß√£o.
        
        Args:
            force_update: Se True, for√ßa atualiza√ß√£o do cache
        
        Returns:
            Dicion√°rio contendo informa√ß√µes sobre Python, sistema e pacotes
        """
        now = time.time()
        if self._cached_info and not force_update and (now - self._last_update) < self._cache_duration:
            return self._cached_info
        
        info = {
            'python': {
                'version': platform.python_version(),
                'implementation': platform.python_implementation(),
                'compiler': platform.python_compiler(),
                'build': platform.python_build(),
            },
            'system': {
                'os': platform.system(),
                'release': platform.release(),
                'machine': platform.machine(),
                'processor': platform.processor(),
                'node': platform.node(),
            },
            'packages': self._get_installed_packages()
        }
        
        self._cached_info = info
        self._last_update = now
        return info
    
    def _get_installed_packages(self) -> Dict[str, str]:
        """
        Retorna dicion√°rio com pacotes instalados e suas vers√µes.
        
        Returns:
            Dicion√°rio com nome do pacote como chave e vers√£o como valor
        """
        return {pkg.key: pkg.version for pkg in pkg_resources.working_set}

class NetworkMonitor:
    """
    Monitor de atividades de rede e m√©tricas de conex√£o.
    Rastreia requisi√ß√µes HTTP, lat√™ncia e erros de rede.
    """
    def __init__(self):
        self.metrics: Dict[str, Dict[str, Any]] = defaultdict(lambda: {
            'total_requests': 0,
            'total_errors': 0,
            'total_bytes': 0,
            'latencies': [],
        })
        self._executor = ThreadPoolExecutor(max_workers=5)
    
    def check_connection(self, host: str = "8.8.8.8", port: int = 53, timeout: float = 1.0) -> Tuple[bool, Optional[float]]:
        """
        Verifica conectividade com a internet.
        
        Args:
            host: Host para verificar conex√£o (padr√£o: servidor DNS do Google)
            port: Porta para conex√£o (padr√£o: 53)
            timeout: Tempo limite em segundos (padr√£o: 1.0)
            
        Returns:
            Tupla contendo (est√°_conectado, lat√™ncia_em_ms)
        """
        try:
            start = time.time()
            socket.create_connection((host, port), timeout=timeout)
            return True, (time.time() - start) * 1000
        except OSError:
            return False, None
    
    def measure_latency(self, url: str, timeout: float = 1.0) -> Dict[str, Any]:
        """
        Mede lat√™ncia para uma URL espec√≠fica.
        
        Args:
            url: URL para medir lat√™ncia
            timeout: Tempo limite em segundos (padr√£o: 1.0)
            
        Returns:
            Dicion√°rio contendo m√©tricas de lat√™ncia ou erro
        """
        try:
            start = time.time()
            response = requests.get(url, timeout=timeout)
            latency = (time.time() - start) * 1000
            
            domain = urlparse(url).netloc
            metrics = self.metrics[domain]
            metrics['total_requests'] += 1
            metrics['latencies'].append(latency)
            metrics['total_bytes'] += len(response.content)
            
            if len(metrics['latencies']) > 100:
                metrics['latencies'] = metrics['latencies'][-100:]
            
            return {
                'latency': latency,
                'status_code': response.status_code,
                'content_size': len(response.content),
            }
        except requests.RequestException as e:
            domain = urlparse(url).netloc
            self.metrics[domain]['total_errors'] += 1
            return {
                'error': str(e),
                'type': type(e).__name__
            }

# Fun√ß√µes de depend√™ncias e rede para o logger
def logger_log_environment(self: Logger, level: str = 'INFO', return_block: bool = False) -> str | None:
    """
    Registra informa√ß√µes detalhadas sobre o ambiente de execu√ß√£o.
    
    Args:
        level: N√≠vel de log para as informa√ß√µes (padr√£o: INFO)
    
    Exemplo:
        logger.log_environment()
    """
    info = self._dep_manager.get_environment_info()
    log_method = getattr(self, level.lower())

    linhas = [
        f"Python {info['python']['version']} ({info['python']['implementation']})",
        f"SO: {info['system']['os']} {info['system']['release']} ({info['system']['machine']})",
        "Pacotes Principais:"
    ]

    important = ['requests', 'psutil', 'colorama', 'pyautogui']
    for pkg in important:
        if pkg in info['packages']:
            linhas.append(f"  - {pkg}: {info['packages'][pkg]}")

    bloco = format_block("üîß AMBIENTE", linhas)
    if return_block:
        return bloco
    log_method(f"\n{bloco}")

def logger_check_connectivity(self: Logger, url: str = None, level: str = 'INFO', timeout: float = 1.0) -> None:
    """
    Verifica e registra status da conectividade.
    
    Args:
        url: URL opcional para testar conectividade espec√≠fica
        level: N√≠vel de log para o resultado (padr√£o: INFO)
        timeout: Timeout em segundos para as verifica√ß√µes de rede (padr√£o: 1.0)
    
    Exemplo:
        logger.check_connectivity('https://api.exemplo.com')
    """
    # Verifica conex√£o b√°sica com timeout reduzido
    connected, latency = self._net_monitor.check_connection(timeout=timeout)
    log_method = getattr(self, level.lower())

    linhas = []
    if connected:
        linhas.append(f"Status: ‚úÖ Conectado ‚Ä¢ Lat√™ncia: {latency:.1f}ms")
    else:
        linhas.append("‚ùå Sem conex√£o com a internet")

    if url:
        try:
            metrics = self._net_monitor.measure_latency(url, timeout=timeout)
            if 'latency' in metrics:
                linhas.append(f"URL Testada: {url}")
                linhas.append(f"‚Ü≥ Lat√™ncia: {metrics['latency']:.1f}ms ‚Ä¢ Status: {metrics['status_code']} ‚Ä¢ Tamanho: {metrics['content_size']/1024:.1f}KB")
            else:
                linhas.append(f"‚ùå Erro ao acessar {url}: {metrics['error']}")
        except Exception as e:
            linhas.append(f"‚ùå Erro ao testar {url}: {str(e)}")

    bloco = format_block("üåê CONECTIVIDADE", linhas)
    log_method(f"\n{bloco}")

def logger_get_network_metrics(self: Logger, domain: str = None) -> Dict[str, Any]:
    """
    Retorna m√©tricas de rede coletadas.
    
    Args:
        domain: Dom√≠nio espec√≠fico para obter m√©tricas (opcional)
    
    Returns:
        Dicion√°rio contendo m√©tricas de rede
    
    Exemplo:
        metrics = logger.get_network_metrics('api.exemplo.com')
    """
    if domain:
        metrics = self._net_monitor.metrics[domain]
        if metrics['latencies']:
            avg_latency = sum(metrics['latencies']) / len(metrics['latencies'])
            metrics['average_latency'] = avg_latency
        return metrics
    return dict(self._net_monitor.metrics)


def logger_sleep(self: Logger, duration: float, unit: str = 's', level: str = 'DEBUG', message: str = None) -> None:
    """
    Pausa a execu√ß√£o pelo tempo especificado e registra a pausa no log.
    
    Args:
        duration: Dura√ß√£o da pausa
        unit: Unidade de tempo ('s'=segundos, 'ms'=milissegundos, 'min'=minutos, 'h'=horas)
        level: N√≠vel de log para as mensagens (padr√£o: DEBUG)
        message: Mensagem opcional para explicar a pausa
    
    Exemplo:
        logger.sleep(2.5)                # Espera 2.5 segundos
        logger.sleep(500, unit='ms')     # Espera 500 milissegundos
        logger.sleep(1, unit='min')      # Espera 1 minuto
        logger.sleep(2, message="Aguardando conex√£o")  # Com mensagem explicativa
    """
    # Converter para segundos com base na unidade
    seconds = duration
    unit_name = "segundo(s)"
    
    if unit == 'ms':
        seconds = duration / 1000
        unit_name = "milissegundo(s)"
    elif unit == 'min':
        seconds = duration * 60
        unit_name = "minuto(s)"
    elif unit == 'h':
        seconds = duration * 3600
        unit_name = "hora(s)"
    
    # Criar mensagem de log
    msg = message or f"Aguardando {duration} {unit_name}"
    log_method = getattr(self, level.lower())
    
    # Registrar in√≠cio, fazer pausa e registrar fim
    log_method(f"‚è≥ {msg}")
    start = time.time()
    time.sleep(seconds)
    elapsed = time.time() - start
    # log_method(f"‚åõ {msg} - conclu√≠do em {elapsed:.2f}s")
    
    return None

def _configure_base_logger(name: str, log_dir: str, console_level: str = 'INFO', file_level: str = 'DEBUG') -> Logger:
    """
    Configura as funcionalidades base do logger.
    
    Args:
        name: Nome base para o logger e arquivos de log
        log_dir: Diret√≥rio base para armazenar os logs

        console_level: N√≠vel de log para o console (padr√£o: 'INFO')
        file_level: N√≠vel de log para o arquivo (padr√£o: 'DEBUG')
        capture_prints: Habilita captura das chamadas ao print
        capture_prints: Habilita captura das chamadas ao print
    
    Returns:
        Logger configurado com funcionalidades b√°sicas
    """
    _init_colorama()
    _define_custom_levels()

    # Converte as strings de n√≠veis para constantes do logging
    console_level_value = getattr(logging, console_level)

    base = Path(log_dir)
    screen_dir, debug_dir = _setup_directories(base)
    filename = _get_log_filename(name)

    logging.setLoggerClass(AutomaticTracebackLogger)
    logger = logging.getLogger(name)
    logger.setLevel(console_level_value)
    logger.handlers.clear()

    # Configura√ß√£o dos handlers e formatters
    datefmt = '%Y-%m-%d %H:%M:%S'
    console_fmt = (
    "{asctime} {emoji} {levelname_color}{levelpad}- {message} {thread_disp}"
    )
    file_fmt = (
        "{asctime} {emoji} {levelname}{levelpad}- {message} <> "
        "     [{pathname}:{lineno}] - [Cadeia de Funcoes: {call_chain}üìç] {thread_disp}"
    )

    # Console handler (colorido)
    ch = ProgressStreamHandler()
    ch.setFormatter(CustomFormatter(fmt=console_fmt, datefmt=datefmt, style='{'))
    logger.addHandler(ch)

    # File handlers (sem cores ANSI)
    formatter = Formatter(fmt=file_fmt, datefmt=datefmt, style='{')
    fh_dbg = FileHandler(debug_dir / filename, encoding='utf-8')
    fh_dbg.setLevel(logging.DEBUG)
    fh_dbg.setFormatter(formatter)
    logger.addHandler(fh_dbg)

    fh_info = FileHandler(base / filename, encoding='utf-8')
    fh_info.setLevel(logging.INFO)
    fh_info.setFormatter(formatter)
    logger.addHandler(fh_info)

    
    # M√©todos extras
    def _screen(self: Logger, msg: str, *args, webdriver=None, **kwargs) -> None:
        """
        Captura e registra uma screenshot com uma mensagem.
        
        Args:
            msg: Mensagem para registrar com a screenshot
            webdriver: Inst√¢ncia opcional do Selenium WebDriver
        """
        _attach_screenshot(self, name or 'log', screen_dir, webdriver)
        self.log(35, msg, *args, stacklevel=2, **kwargs)

    setattr(Logger, 'screen', _screen)
    setattr(Logger, 'start', _log_start)
    setattr(Logger, 'end', _log_end)

    # Armazena caminho do arquivo de log atual no logger
    file_path = base / filename
    debug_path = debug_dir / filename
    setattr(logger, 'log_path', str(file_path))
    setattr(logger, 'debug_log_path', str(debug_path))

    # M√©todo cleanup para limpar o console
    def _cleanup(self: Logger) -> None:
        """Limpa o console."""
        cmd = 'cls' if os.name == 'nt' else 'clear'
        os.system(cmd)
    setattr(Logger, 'cleanup', _cleanup)

    # M√©todo path para retornar o caminho do log atual
    def _path(self: Logger) -> str:
        """
        Retorna o caminho do arquivo de log atual.
        
        Returns:
            Caminho completo para o arquivo de log
        """
        return getattr(self, 'log_path', None)
    setattr(Logger, 'path', _path)

    def _debug_path(self: Logger) -> str:
        return getattr(self, 'debug_log_path', None)
    setattr(Logger, 'debug_path', _debug_path)


    # M√©todo para pausar a execu√ß√£o com um input
    def _pause(self: Logger, msg: str = "Digite algo para continuar... ") -> str:
        """
        Pausa a execu√ß√£o e aguarda input do usu√°rio.
        
        Args:
            msg: Mensagem a ser exibida (padr√£o: "Digite algo para continuar... ")
            
        Returns:
            Texto digitado pelo usu√°rio
        """
        resp = input(msg)
        # registrando a resposta no log
        self.debug(f"Resposta do usu√°rio: {resp}")
        return resp
    setattr(Logger, 'pause', _pause)

    return logger
# Setup utility functions
def _setup_utility_functions(logger: Logger) -> None:
    setattr(Logger, "sleep", logger_sleep)
    setattr(Logger, "progress", logger_progress)
    setattr(Logger, "capture_prints", logger_capture_prints)

def start_logger(
    name: str = None,
    log_dir: str = 'Logs',
    console_level: str = 'INFO',
    file_level: str = 'DEBUG',
    capture_prints: bool = True,
) -> Logger:
    """
    Configura e inicializa um sistema de logging avan√ßado com m√∫ltiplas funcionalidades.
    
    Args:
        name: Nome base para o logger e arquivos de log (opcional)
        log_dir: Diret√≥rio base para armazenar os logs (padr√£o: 'Logs')
        console_level: N√≠vel de log para o console (padr√£o: 'INFO')
        file_level: N√≠vel de log para o arquivo (padr√£o: 'DEBUG')
        capture_prints: Habilita captura das chamadas ao print
    
    Returns:
        Logger: Inst√¢ncia configurada do logger com todos os recursos habilitados
    
    Exemplo:
        logger = start_logger('MeuApp')
        logger.start()
        logger.info('Iniciando processamento...')
        logger.end()
    """
    logger = _configure_base_logger(name, log_dir, console_level, file_level)
    _setup_metrics(logger)
    _setup_monitoring(logger)
    _setup_context_and_profiling(logger)
    _setup_dependencies_and_network(logger)
    _setup_utility_functions(logger)
    if capture_prints:
        logger.capture_prints(True)
    return logger

def _configure_base_logger(name: str, log_dir: str, console_level: str = 'INFO', file_level: str = 'DEBUG') -> Logger:
    """
    Configura as funcionalidades base do logger.
    
    Args:
        name: Nome base para o logger e arquivos de log
        log_dir: Diret√≥rio base para armazenar os logs
        console_level: N√≠vel de log para o console (padr√£o: 'INFO')
        file_level: N√≠vel de log para o arquivo (padr√£o: 'DEBUG')
    
    Returns:
        Logger configurado com funcionalidades b√°sicas
    """
    _init_colorama()
    _define_custom_levels()

    # Converte as strings de n√≠veis para constantes do logging
    console_level_value = getattr(logging, console_level)

    base = Path(log_dir)
    screen_dir, debug_dir = _setup_directories(base)
    filename = _get_log_filename(name)

    logging.setLoggerClass(AutomaticTracebackLogger)
    logger = logging.getLogger(name)
    logger.setLevel(console_level_value)
    logger.handlers.clear()

    # Configura√ß√£o dos handlers e formatters
    datefmt = '%Y-%m-%d %H:%M:%S'
    console_fmt = (
    "{asctime} {emoji} {levelname_color}{levelpad}- {message} {thread_disp}"
    )
    file_fmt = (
        "{asctime} {emoji} {levelname}{levelpad}- {message} <> "
        "     [{pathname}:{lineno}] - [Cadeia de Funcoes: {call_chain}üìç] {thread_disp}"
    )

    # Console handler (colorido)
    ch = ProgressStreamHandler()
    ch.setFormatter(CustomFormatter(fmt=console_fmt, datefmt=datefmt, style='{'))
    logger.addHandler(ch)

    # File handlers (sem cores ANSI)
    formatter = Formatter(fmt=file_fmt, datefmt=datefmt, style='{')
    fh_dbg = FileHandler(debug_dir / filename, encoding='utf-8')
    fh_dbg.setLevel(logging.DEBUG)
    fh_dbg.setFormatter(formatter)
    logger.addHandler(fh_dbg)

    fh_info = FileHandler(base / filename, encoding='utf-8')
    fh_info.setLevel(logging.INFO)
    fh_info.setFormatter(formatter)
    logger.addHandler(fh_info)

    
    # M√©todos extras
    def _screen(self: Logger, msg: str, *args, webdriver=None, **kwargs) -> None:
        """
        Captura e registra uma screenshot com uma mensagem.
        
        Args:
            msg: Mensagem para registrar com a screenshot
            webdriver: Inst√¢ncia opcional do Selenium WebDriver
        """
        _attach_screenshot(self, name or 'log', screen_dir, webdriver)
        self.log(35, msg, *args, stacklevel=2, **kwargs)

    setattr(Logger, 'screen', _screen)
    setattr(Logger, 'start', _log_start)
    setattr(Logger, 'end', _log_end)

    # Armazena caminho do arquivo de log atual no logger
    file_path = base / filename
    debug_path = debug_dir / filename
    setattr(logger, 'log_path', str(file_path))
    setattr(logger, 'debug_log_path', str(debug_path))

    # M√©todo cleanup para limpar o console
    def _cleanup(self: Logger) -> None:
        """Limpa o console."""
        cmd = 'cls' if os.name == 'nt' else 'clear'
        os.system(cmd)
    setattr(Logger, 'cleanup', _cleanup)

    # M√©todo path para retornar o caminho do log atual
    def _path(self: Logger) -> str:
        """
        Retorna o caminho do arquivo de log atual.
        
        Returns:
            Caminho completo para o arquivo de log
        """
        return getattr(self, 'log_path', None)
    setattr(Logger, 'path', _path)
    def _debug_path(self: Logger) -> str:
        return getattr(self, 'debug_log_path', None)
    setattr(Logger, 'debug_path', _debug_path)

    # M√©todo para pausar a execu√ß√£o com um input
    def _pause(self: Logger, msg: str = "Digite algo para continuar... ") -> str:
        """
        Pausa a execu√ß√£o e aguarda input do usu√°rio.
        
        Args:
            msg: Mensagem a ser exibida (padr√£o: "Digite algo para continuar... ")
            
        Returns:
            Texto digitado pelo usu√°rio
        """
        resp = input(msg)
        # registrando a resposta no log
        self.debug(f"Resposta do usu√°rio: {resp}")
        return resp
    setattr(Logger, 'pause', _pause)

    return logger
