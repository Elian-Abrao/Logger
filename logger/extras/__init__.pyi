from typing import Iterable, Any, Dict
from logging import Logger
from pathlib import Path

class LoggerProgressBar:
    ...

class DependencyManager:
    ...

class NetworkMonitor:
    ...

class MetricsTracker:
    ...

class SystemMonitor:
    ...

class Timer:
    ...

# helper functions

def logger_progress(
    self: Logger,
    iterable: Iterable[Any] | None = ..., 
    total: int | None = ..., 
    desc: str = ..., 
    leave: bool = ..., 
    unit: str = ..., 
    log_interval: float = ..., 
    log_level: str = ...,
) -> LoggerProgressBar | Iterable[Any]:
    ...

def format_block(title: str, lines: Iterable[str]) -> str: ...

def combine_blocks(blocks: Iterable[str]) -> str: ...

def logger_capture_prints(self: Logger, active: bool = ..., level: str = ..., prefix: str = ...) -> None: ...

def _init_colorama() -> None: ...

def _setup_directories(base_dir: Path) -> tuple[Path, Path]: ...

def _get_log_filename(name: str | None) -> str: ...

def _attach_screenshot(logger: Logger, name: str, screen_dir: Path, webdriver=None) -> None: ...

def logger_reset_metrics(self: Logger) -> None: ...

def logger_report_metrics(self: Logger, level: str = ...) -> None: ...

def logger_log_environment(self: Logger, level: str = ..., return_block: bool = ...) -> str | None: ...

def logger_check_connectivity(
    self: Logger,
    urls: str | Iterable[str] | None = ...,
    level: str = ...,
    timeout: float = ...,
    return_block: bool = ...,
) -> str | None: ...

def logger_get_network_metrics(self: Logger, domain: str | None = ...) -> Dict[str, Any]: ...

def logger_log_system_status(self: Logger, level: str = ..., return_block: bool = ...) -> str | None: ...

def logger_memory_snapshot(self: Logger) -> None: ...

def logger_check_memory_leak(
    self: Logger,
    level: str = ...,
    return_block: bool = ...,
    *,
    show_all: bool | None = ...,
    watch: Iterable[str] | None = ...,
    mem_threshold: float | None = ...,

) -> str | None: ...

def logger_sleep(self: Logger, duration: float, unit: str = ..., level: str = ..., message: str | None = ...) -> None: ...

def logger_timer(self: Logger, name: str = ..., level: str = ...) -> Timer: ...

def logger_log_start(self: Logger, verbose: int = ...) -> None: ...

def logger_log_end(self: Logger, verbose: int = ...) -> None: ...

def _setup_metrics(logger: Logger) -> None: ...
def _setup_monitoring(logger: Logger) -> None: ...
def _setup_dependencies_and_network(logger: Logger) -> None: ...
def _setup_lifecycle(logger: Logger) -> None: ...

def screen(self: Logger, msg: str, *args, webdriver=None, **kwargs) -> None: ...
def cleanup(self: Logger) -> None: ...
def path(self: Logger) -> str | None: ...
def debug_path(self: Logger) -> str | None: ...
def pause(self: Logger, msg: str = ...) -> str: ...

__all__: list[str]
