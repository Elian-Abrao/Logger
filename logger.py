import logging
from logging import Logger, Formatter, StreamHandler, FileHandler
from pathlib import Path
from datetime import datetime
from colorama import init, Fore, Style
import threading
import os
import inspect
import sys
import time
from contextlib import contextmanager
from typing import Optional, Dict, List, Tuple, Any, Callable
from collections import defaultdict
import psutil
import gc
import cProfile
import pstats
import io
import functools
from contextvars import ContextVar
import pkg_resources
import platform
import socket
import requests
from urllib.parse import urlparse
from concurrent.futures import ThreadPoolExecutor
from wcwidth import wcswidth
import builtins

try:
    import pyautogui
except ImportError:
    pyautogui = None

# Inicializa o m√≥dulo colorama para permitir a exibi√ß√£o de cores no console do Windows.
# O par√¢metro autoreset=True garante que as cores sejam resetadas automaticamente ap√≥s cada uso.
def _init_colorama():
    init(autoreset=True)

# Lista de fun√ß√µes internas que devem ser exclu√≠das do rastreamento da cadeia de chamadas (call chain).
# Estas fun√ß√µes s√£o utilit√°rias do pr√≥prio logger e n√£o devem aparecer no registro de chamadas do usu√°rio.
_INTERNAL_FUNCS = {
    'format', '_extract_call_chain', '_init_colorama',
    '_define_custom_levels', '_setup_directories', '_get_log_filename',
    '_attach_screenshot', 'screen'
}

# Vari√°vel de contexto para rastreamento
_log_context = ContextVar('log_context', default=[])

class CustomFormatter(Formatter):
    """
    Formatter personalizado que implementa formata√ß√£o avan√ßada para logs com recursos visuais e contextuais.
    
    Caracter√≠sticas Principais:
    1. Formata√ß√£o Visual:
        - Emojis √∫nicos para cada n√≠vel de log
        - Cores distintas no console usando colorama
        - Alinhamento padronizado das mensagens
        - Espa√ßamento consistente entre elementos
    
    2. Informa√ß√µes Contextuais:
        - Nome do n√≠vel de log com cor
        - Timestamp preciso
        - Informa√ß√µes de thread
        - Cadeia de chamadas de fun√ß√µes
        - Caminho do arquivo e n√∫mero da linha
    
    3. Personaliza√ß√£o por N√≠vel:
        DEBUG (üêõ Azul): Para informa√ß√µes detalhadas de desenvolvimento
        INFO (üîç Verde): Para informa√ß√µes gerais do processo
        SUCCESS (‚úÖ Ciano): Para opera√ß√µes bem-sucedidas
        WARNING (üö® Amarelo): Para avisos e alertas
        ERROR (‚ùå Vermelho): Para erros recuper√°veis
        CRITICAL (üî• Magenta): Para erros cr√≠ticos do sistema
        SCREEN (üì∏ Magenta): Para registrar capturas de tela
    
    4. Formatos de Sa√≠da:
        Console: "{timestamp} {emoji} [N√çVEL] - {mensagem} {thread}"
        Arquivo: "{timestamp} {emoji} [N√çVEL] - {mensagem} <> [arquivo:linha] - [fun√ß√µesüìç] {thread}"
    
    5. Recursos Autom√°ticos:
        - Detec√ß√£o autom√°tica de thread principal
        - Formata√ß√£o condicional baseada no contexto
        - Reset autom√°tico de cores ap√≥s cada mensagem
        - Padding din√¢mico para alinhamento
    """
    
    # Dicion√°rio que mapeia cada n√≠vel de log para um emoji representativo
    # Facilita a identifica√ß√£o visual r√°pida do tipo de mensagem no log
    LEVEL_EMOJI = {
        'DEBUG':    'üêõ',  # Bug para debugging
        'INFO':     'üîç',  # Lupa para informa√ß√µes
        'SUCCESS':  '‚úÖ',  # Check verde para sucesso
        'WARNING':  'üö®',  # Sirene para avisos
        'ERROR':    '‚ùå',  # X vermelho para erros
        'CRITICAL': 'üî•',  # Fogo para erros cr√≠ticos
        'SCREEN':   'üì∏',  # C√¢mera para capturas de tela
    }

    # Dicion√°rio que define as cores ANSI para cada n√≠vel de log
    # Utiliza as cores do m√≥dulo colorama para melhor visualiza√ß√£o no console
    LEVEL_COLOR = {
        'DEBUG':    Fore.BLUE,     # Azul para debugging
        'INFO':     Fore.GREEN,    # Verde para informa√ß√µes
        'SUCCESS':  Fore.CYAN,     # Ciano para sucesso
        'WARNING':  Fore.YELLOW,   # Amarelo para avisos
        'ERROR':    Fore.RED,      # Vermelho para erros
        'CRITICAL': Fore.MAGENTA,  # Magenta para erros cr√≠ticos
        'SCREEN':   Fore.MAGENTA,  # Magenta para capturas de tela
    }

    def format(self, record):
        # Emojis e cores
        record.emoji = self.LEVEL_EMOJI.get(record.levelname, 'üîπ')
        color = self.LEVEL_COLOR.get(record.levelname, '')
        record.levelname_color = f"{color}[{record.levelname}]{Style.RESET_ALL}"
        record.levelname = f"[{record.levelname}]"

        pad = 11
        record.levelpad = ' ' * (pad - len(record.levelname))

        record.thread = threading.current_thread().name
        record.thread_disp = '' if record.thread == 'MainThread' else f"[T:{record.thread}]"

        record.call_chain = _extract_call_chain(record)

        # Verifica se o log veio de fora do sistema de logger
        if "logger" not in record.pathname.lower():
            filename = Path(record.pathname).name
            record.meta = f"‚Æï üìÅ{filename}:{record.lineno} | üß≠ {record.call_chain}"
        else:
            record.meta = ""

        # Formata a mensagem com o formatter base + metadados compactos (se houver)
        mensagem_formatada = super().format(record)
        if record.meta:
            mensagem_formatada += f" {record.meta}"

        return mensagem_formatada

class AutomaticTracebackLogger(logging.Logger):
    """
    Logger personalizado com captura e formata√ß√£o autom√°tica de stack traces para exce√ß√µes.
    
    Caracter√≠sticas Principais:
    1. Captura Autom√°tica:
        - Detecta automaticamente exce√ß√µes ativas
        - Inclui stack trace completo nos logs
        - Preserva contexto da exce√ß√£o
    
    2. N√≠veis de Log Aprimorados:
        error(): 
            - Captura autom√°tica de exce√ß√µes ativas
            - Ideal para erros recuper√°veis
            - Mant√©m contexto do erro original
        
        exception():
            - Deve ser chamado dentro de blocos except
            - Sempre inclui stack trace completo
            - Formata√ß√£o detalhada da exce√ß√£o
        
        critical():
            - Para erros graves do sistema
            - Captura autom√°tica de exce√ß√µes
            - Stack trace completo quando dispon√≠vel
    
    3. Benef√≠cios:
        - Reduz c√≥digo boilerplate para logging de exce√ß√µes
        - Melhora diagn√≥stico de problemas
        - Mant√©m consist√™ncia no formato dos logs
        - Facilita depura√ß√£o posterior
    
    4. Integra√ß√£o:
        - Compat√≠vel com try/except
        - Suporte a contextos aninhados
        - Preserva hierarquia de exce√ß√µes
    
    Exemplo de Uso:
        try:
            operacao_arriscada()
        except Exception:
            logger.exception("Falha na opera√ß√£o")  # Stack trace autom√°tico
        
        # Ou simplesmente:
        if erro_detectado:
            logger.error("Erro encontrado")  # Stack trace se houver exce√ß√£o ativa
    """
    
    def error(self, msg, *args, **kwargs):
        exc_info = sys.exc_info()
        if exc_info[0] is not None:
            kwargs['exc_info'] = exc_info
        super().error(msg, *args, **kwargs)

    def exception(self, msg, *args, **kwargs):
        kwargs['exc_info'] = True
        self.error(msg, *args, **kwargs)

    def critical(self, msg, *args, **kwargs):
        exc_info = sys.exc_info()
        if exc_info[0] is not None:
            kwargs['exc_info'] = exc_info
        super().critical(msg, *args, **kwargs)

def _extract_call_chain(record) -> str:
    """
    Extrai call chain das fun√ß√µes do usu√°rio, ignorando internas e threading.
    """
    chain = []
    for frame_info in inspect.stack():
        func = frame_info.function
        module = frame_info.frame.f_globals.get('__name__', '')
        filename = frame_info.filename
        # Ignora fun√ß√µes internas ou de m√≥dulos padr√£o
        if func in _INTERNAL_FUNCS:
            continue
        if module.startswith(('logging', 'inspect', 'colorama', 'threading')):
            continue
        if module == __name__:
            continue
        if not filename.endswith('.py'):
            continue
        chain.append(func)
    # Remove duplicatas e inverte ordem (raiz>atual)
    unique = []
    for f in reversed(chain):
        if not unique or unique[-1] != f:
            unique.append(f)
    return '>'.join(unique) or record.funcName

def _define_custom_levels():
    """
    Define n√≠veis de log personalizados al√©m dos n√≠veis padr√£o do Python.
    
    Adiciona os seguintes n√≠veis:
    - SUCCESS (25): Para registrar opera√ß√µes bem-sucedidas
    - SCREEN (35): Para registrar capturas de tela
    
    Os n√≠veis s√£o registrados no sistema de logging e m√©todos correspondentes
    s√£o adicionados dinamicamente √† classe Logger.
    """
    levels = {25: 'SUCCESS', 35: 'SCREEN'}
    for lvl, name in levels.items():
        if name not in logging._nameToLevel:
            logging.addLevelName(lvl, name)
            def log_for(self, msg, *args, _lvl=lvl, **kwargs):
                if self.isEnabledFor(_lvl):
                    self._log(_lvl, msg, args, **kwargs)
            setattr(Logger, name.lower(), log_for)

def _log_start(self: Logger, verbose: int = 1, timeout: float = 1.0):
    """
    Registra o in√≠cio de um processo com informa√ß√µes detalhadas do ambiente.
    
    Args:
        verbose (int): N√≠vel de detalhes a apresentar:
            0 = Apenas banner de in√≠cio
            1 = Banner + sistema e ambiente (padr√£o)
            2 = Banner + sistema, ambiente e m√©tricas iniciais
        timeout (float): Timeout em segundos para opera√ß√µes de rede (padr√£o: 1.0)
    """
    folder = Path(os.getcwd()).name
    script = Path(sys.argv[0]).name
    now = datetime.now()
    data = now.strftime('%d/%m/%Y')
    hora = now.strftime('%H:%M:%S')
    
    # Banner de in√≠cio
    linhas = [
        "üöÄ PROCESSO INICIADO",
        f"Data: {data} ‚Ä¢ Hora: {hora}",
        f"Script: {script} ‚Ä¢ Pasta: {folder}"
    ]
    banner = format_block("üö¶IN√çCIO", linhas)
    self.success(f"\n{banner}")
    
    # Reseta m√©tricas para come√ßar do zero (r√°pido e √∫til sempre)
    if verbose >= 1:
        self.reset_metrics()
    
    # Informa√ß√µes adicionais baseadas no n√≠vel verbose
    if verbose >= 1:
        # Registra o estado do sistema (opera√ß√£o leve)
        self.log_system_status()
        # Registra informa√ß√µes do ambiente (opera√ß√£o leve)
        self.log_environment()
    
    if verbose >= 2:
        # Snapshot de mem√≥ria (pode ser pesado em sistemas grandes)
        self.debug("Registrando snapshot inicial de mem√≥ria...")
        self.memory_snapshot()


def _log_end(self: Logger, verbose: int = 1, timeout: float = 1.0):
    """
    Registra o t√©rmino de um processo com informa√ß√µes detalhadas.
    
    Args:
        verbose (int): N√≠vel de detalhes a apresentar:
            0 = Apenas banner de fim
            1 = Banner + status do sistema (padr√£o)
            2 = Banner + status do sistema + relat√≥rio completo de m√©tricas
        timeout (float): Timeout em segundos para opera√ß√µes de rede (padr√£o: 1.0)
    """
    folder = Path(os.getcwd()).name
    script = Path(sys.argv[0]).name
    now = datetime.now()
    data = now.strftime('%d/%m/%Y')
    hora = now.strftime('%H:%M:%S')
    
    # Informa√ß√µes adicionais baseadas no n√≠vel verbose
    if verbose >= 2:
        # Gera o relat√≥rio de m√©tricas (opera√ß√£o leve)
        self.report_metrics()
        
        # Verifica vazamentos de mem√≥ria (pode ser pesado em sistemas grandes)
        self.debug("Verificando poss√≠veis vazamentos de mem√≥ria...")
        self.check_memory_leak()
    
    if verbose >= 1:
        # Registra o estado final do sistema (opera√ß√£o leve)
        self.log_system_status()
    
    # Banner de finaliza√ß√£o
    linhas = [
        "üèÅ PROCESSO FINALIZADO",
        f"Data: {data} ‚Ä¢ Hora: {hora}",
        f"Script: {script} ‚Ä¢ Pasta: {folder}"
    ]
    banner = format_block("üèÅ FIM", linhas)
    self.success(f"\n{banner}")

def _setup_directories(base_dir: Path, split_debug: bool):
    """
    Cria e configura a estrutura de diret√≥rios necess√°ria para o sistema de logging.
    
    Par√¢metros:
        base_dir (Path): Diret√≥rio base onde os logs ser√£o armazenados
        split_debug (bool): Se True, cria um diret√≥rio separado para logs de debug
    
    Cria os seguintes diret√≥rios:
    - Logs: Diret√≥rio principal para todos os logs
    - LogsDEBUG: Diret√≥rio opcional para logs de debug (se split_debug=True)
    - PrintScreens: Diret√≥rio para armazenar capturas de tela
    
    Retorna:
        tuple: (screen_dir, debug_dir) - Paths para os diret√≥rios criados
    """
    screen_dir = base_dir / 'PrintScreens'
    debug_dir  = base_dir / 'LogsDEBUG'
    base_dir.mkdir(parents=True, exist_ok=True)
    screen_dir.mkdir(parents=True, exist_ok=True)
    if split_debug:
        debug_dir.mkdir(parents=True, exist_ok=True)
    return screen_dir, debug_dir

def _get_log_filename(name: str) -> str:
    """
    Gera um nome de arquivo de log √∫nico com timestamp.
    
    Par√¢metros:
        name (str): Nome base para o arquivo de log
    
    Retorna:
        str: Nome do arquivo no formato '<name> - DD-MM-YYYY HH-MM-SS.log'
             Se name n√£o for fornecido, usa 'log' como padr√£o
    """
    ts = datetime.now().strftime('%d-%m-%Y %H-%M-%S')
    return f"{name or 'log'} - {ts}.log"

def _attach_screenshot(logger: Logger, name: str, screen_dir: Path, webdriver=None):
    """
    Captura e salva uma screenshot do sistema ou navegador.
    
    Par√¢metros:
        logger (Logger): Inst√¢ncia do logger para registrar o processo
        name (str): Nome base para o arquivo de screenshot
        screen_dir (Path): Diret√≥rio onde as screenshots ser√£o salvas
        webdriver (WebDriver, opcional): Inst√¢ncia do Selenium WebDriver para capturas do navegador
    
    Comportamento:
    - Tenta primeiro usar o webdriver se fornecido (para capturas do navegador)
    - Se n√£o houver webdriver ou falhar, tenta usar pyautogui (para capturas do sistema)
    - Registra sucesso ou falha no log
    - Gera nome √∫nico com timestamp para cada arquivo
    """
    ts = datetime.now().strftime('%d-%m-%Y_%H-%M-%S')
    path = screen_dir / f"{name}_{ts}.png"
    if webdriver:
        try:
            webdriver.save_screenshot(str(path))
            logger.debug(f"Screenshot via webdriver salva em {path}")
        except:
            logger.warning(f"Falha ao capturar screenshot via webdriver: {path}")
    elif pyautogui:
        try:
            pyautogui.screenshot().save(path)
            logger.debug(f"Screenshot via pyautogui salva em {path}")
        except:
            logger.warning(f"Falha ao capturar screenshot via pyautogui: {path}")

class MetricsManager:
    """
    Gerenciador de m√©tricas para rastreamento de tempo de execu√ß√£o e contadores.
    
    Caracter√≠sticas:
    - Rastreamento de tempo de execu√ß√£o de blocos de c√≥digo
    - Contadores personalizados
    - Estat√≠sticas de execu√ß√£o
    - Relat√≥rios formatados
    """
    def __init__(self):
        self.timers: Dict[str, List[float]] = defaultdict(list)
        self.counters: Dict[str, int] = defaultdict(int)
        self._active_timers: Dict[str, float] = {}

    def add_execution_time(self, name: str, time_taken: float) -> None:
        """
        Adiciona um tempo de execu√ß√£o para uma m√©trica espec√≠fica.
        
        Args:
            name: Nome da m√©trica
            time_taken: Tempo de execu√ß√£o em segundos
        """
        self.timers[name].append(time_taken)
    
    def increment_counter(self, name: str, value: int = 1) -> None:
        """
        Incrementa um contador espec√≠fico.
        
        Args:
            name: Nome do contador
            value: Valor a incrementar (padr√£o: 1)
        """
        self.counters[name] += value
    
    def get_statistics(self, name: str) -> Dict[str, float]:
        """
        Retorna estat√≠sticas para uma m√©trica espec√≠fica.
        
        Args:
            name: Nome da m√©trica
            
        Returns:
            Dicion√°rio contendo estat√≠sticas (count, total_time, average_time, min_time, max_time)
        """
        times = self.timers.get(name, [])
        if not times:
            return {}
        return {
            'count': len(times),
            'total_time': sum(times),
            'average_time': sum(times) / len(times),
            'min_time': min(times),
            'max_time': max(times)
        }
    
    def get_counter(self, name: str) -> int:
        """
        Retorna o valor de um contador espec√≠fico.
        
        Args:
            name: Nome do contador
            
        Returns:
            Valor atual do contador
        """
        return self.counters.get(name, 0)
    
    def reset(self) -> None:
        """
        Reseta todas as m√©tricas.
        """
        self.timers.clear()
        self.counters.clear()
        self._active_timers.clear()

    def format_report(self) -> str:
        """
        Gera um relat√≥rio formatado com todas as m√©tricas.
        
        Returns:
            Relat√≥rio formatado como string
        """
        lines = ['=== Relat√≥rio de M√©tricas ===']
        
        if self.timers:
            lines.append('\n--- Temporizadores ---')
            for name, times in self.timers.items():
                stats = self.get_statistics(name)
                lines.append(f"\n{name}:")
                lines.append(f"  Execu√ß√µes: {stats['count']}")
                lines.append(f"  Tempo Total: {stats['total_time']:.3f}s")
                lines.append(f"  M√©dia: {stats['average_time']:.3f}s")
                lines.append(f"  Min: {stats['min_time']:.3f}s")
                lines.append(f"  Max: {stats['max_time']:.3f}s")
        
        if self.counters:
            lines.append('\n--- Contadores ---')
            for name, value in self.counters.items():
                lines.append(f"{name}: {value}")
        
        return '\n'.join(lines)

# Fun√ß√µes de m√©tricas para o logger
@contextmanager
def logger_timer(self: Logger, name: str, level: str = 'DEBUG') -> None:
    """
    Context manager para medir tempo de execu√ß√£o de um bloco de c√≥digo.
    
    Args:
        name: Nome da m√©trica de tempo
        level: N√≠vel de log para o resultado (padr√£o: DEBUG)
        
    Exemplo:
        with logger.timer('operacao_importante'):
            # c√≥digo a ser medido
    """
    start_time = time.time()
    try:
        yield
    finally:
        elapsed = time.time() - start_time
        self._metrics.add_execution_time(name, elapsed)
        log_method = getattr(self, level.lower())
        log_method(f"[‚è±Ô∏è {name}] Tempo de execu√ß√£o: {elapsed:.3f}s")

def logger_count(self: Logger, name: str, value: int = 1, level: str = 'DEBUG') -> None:
    """
    Incrementa um contador e registra no log.
    
    Args:
        name: Nome do contador
        value: Valor a incrementar (padr√£o: 1)
        level: N√≠vel de log para o resultado (padr√£o: DEBUG)
    
    Exemplo:
        logger.count('eventos_processados')
    """
    self._metrics.increment_counter(name, value)
    log_method = getattr(self, level.lower())
    log_method(f"[üìä {name}] Contador: {self._metrics.get_counter(name)}")

def logger_report_metrics(self: Logger, level: str = 'INFO') -> None:
    """
    Gera e registra um relat√≥rio completo de m√©tricas.
    
    Args:
        level: N√≠vel de log para o relat√≥rio (padr√£o: INFO)
    
    Exemplo:
        logger.report_metrics()
    """
    # Obt√©m as m√©tricas do gerenciador
    metrics = self._metrics
    log_method = getattr(self, level.lower())
    
    linhas = []
    
    # Formata os temporizadores
    if metrics.timers:
        linhas.append("‚è±Ô∏è TEMPORIZADORES:")
        for name, times in metrics.timers.items():
            stats = metrics.get_statistics(name)
            linhas.append(f"  {name}:")
            linhas.append(f"    Execu√ß√µes: {stats['count']} ‚Ä¢ Tempo total: {stats['total_time']:.3f}s")
            linhas.append(f"    M√©dia: {stats['average_time']:.3f}s ‚Ä¢ Min: {stats['min_time']:.3f}s ‚Ä¢ Max: {stats['max_time']:.3f}s")
    
    # Formata os contadores
    if metrics.counters:
        if metrics.timers:  # Adiciona linha em branco se tamb√©m tiver temporizadores
            linhas.append("")
        linhas.append("üìä CONTADORES:")
        for name, value in metrics.counters.items():
            linhas.append(f"  {name}: {value}")
    
    # Se n√£o houver m√©tricas, adiciona mensagem informativa
    if not metrics.timers and not metrics.counters:
        linhas.append("Nenhuma m√©trica registrada.")
    
    # Formata o bloco completo
    bloco = format_block("üìä RELAT√ìRIO DE M√âTRICAS", linhas)
    log_method(f"\n{bloco}")

def logger_reset_metrics(self: Logger) -> None:
    """
    Reseta todas as m√©tricas acumuladas.
    
    Exemplo:
        logger.reset_metrics()
    """
    self._metrics.reset()
    self.debug("M√©tricas resetadas")

def _setup_metrics(logger: Logger) -> None:
    """
    Configura o sistema de m√©tricas no logger.
    
    Args:
        logger: Inst√¢ncia do logger a ser configurada
    """
    metrics = MetricsManager()
    setattr(logger, '_metrics', metrics)
    
    # Adiciona os m√©todos ao logger
    setattr(Logger, 'timer', logger_timer)
    setattr(Logger, 'count', logger_count)
    setattr(Logger, 'report_metrics', logger_report_metrics)
    setattr(Logger, 'reset_metrics', logger_reset_metrics)

class SystemMonitor:
    """
    Monitor de recursos do sistema e mem√≥ria.
    
    Caracter√≠sticas:
    - Monitoramento de uso de CPU
    - Monitoramento de mem√≥ria
    - Contagem de objetos Python
    - Detec√ß√£o de vazamentos de mem√≥ria
    """
    def __init__(self):
        self.process = psutil.Process()
        self._baseline_memory: Optional[float] = None
        self._object_counts: Optional[Dict[str, int]] = None
    
    def get_memory_usage(self) -> Tuple[float, float]:
        """
        Retorna uso de mem√≥ria (MB) do processo e do sistema.
        
        Returns:
            Tupla contendo (mem√≥ria_do_processo_MB, percentual_de_mem√≥ria_do_sistema)
        """
        process_memory = self.process.memory_info().rss / 1024 / 1024
        system_memory = psutil.virtual_memory().percent
        return process_memory, system_memory
    
    def get_cpu_usage(self) -> Tuple[float, float]:
        """
        Retorna uso de CPU (%) do processo e do sistema.
        
        Returns:
            Tupla contendo (cpu_do_processo_percentual, cpu_do_sistema_percentual)
        """
        process_cpu = self.process.cpu_percent()
        system_cpu = psutil.cpu_percent()
        return process_cpu, system_cpu
    
    def take_memory_snapshot(self) -> None:
        """
        Registra estado atual da mem√≥ria como baseline.
        """
        gc.collect()
        self._baseline_memory = self.get_memory_usage()[0]
        self._object_counts = self._count_objects()
    
    def _count_objects(self) -> Dict[str, int]:
        """
        Conta objetos Python por tipo.
        
        Returns:
            Dicion√°rio com contagem de objetos por tipo
        """
        return {str(type(obj).__name__): len([o for o in gc.get_objects() if type(o) is type(obj)])
                for obj in gc.get_objects()}
    
    def get_memory_diff(self) -> Tuple[float, Dict[str, int]]:
        """
        Retorna diferen√ßa de mem√≥ria e objetos desde o √∫ltimo snapshot.
        
        Returns:
            Tupla contendo (diferen√ßa_de_mem√≥ria_MB, dicion√°rio_com_diferen√ßas_de_objetos)
        """
        if self._baseline_memory is None:
            return 0.0, {}
        
        current_memory = self.get_memory_usage()[0]
        memory_diff = current_memory - self._baseline_memory
        
        current_counts = self._count_objects()
        object_diff = {
            name: current_counts.get(name, 0) - self._object_counts.get(name, 0)
            for name in set(current_counts) | set(self._object_counts or {})
            if current_counts.get(name, 0) != self._object_counts.get(name, 0)
        }
        
        return memory_diff, object_diff

def format_block(title: str, lines: List[str]) -> str:
    """
    Cria um bloco ASCII com t√≠tulo centralizado e linhas internas todas da mesma largura,
    medindo corretamente os emojis.
    """
    space = " "*36
    # 1. Prepara o t√≠tulo
    title_str = f"[{title}]"
    title_w = wcswidth(title_str)

    # 2. Calcula a largura m√°xima de qualquer linha de conte√∫do
    content_ws = [wcswidth(line) for line in lines] if lines else [0]
    max_content_w = max(content_ws)

    # 3. Define a largura total do bloco (conte√∫do + margens)
    inner_width = max(title_w, max_content_w)  # largura √∫til
    total_w = inner_width + 4  # +2 espa√ßos e +2 bordas verticais

    # 4. Monta a linha de topo com t√≠tulo centralizado
    pad_total = total_w - title_w - 2  # -2 para os cantos ‚ï≠‚ïÆ
    left = pad_total // 2
    right = pad_total - left
    topo = f"{space}‚ï≠{'‚îÄ'*left}{title_str}{'‚îÄ'*right}‚ïÆ"

    # 5. Linhas internas todas com a MESMA largura (total_w)
    corpo = []
    for line, w in zip(lines, content_ws):
        # quantas colunas "vazias" faltam para chegar ao inner_width
        falta = inner_width - w
        corpo.append(f"{space}‚îÇ {line}{' '*falta} ‚îÇ")

    # 6. Base do bloco
    base = f"{space}‚ï∞{'‚îÄ'*(total_w-2)}‚ïØ"

    return "\n".join([topo] + corpo + [base])

# Fun√ß√µes de monitoramento para o logger
def logger_log_system_status(self: Logger, level: str = 'INFO') -> None:
    proc_mem, sys_mem = self._monitor.get_memory_usage()
    proc_cpu, sys_cpu = self._monitor.get_cpu_usage()
    
    linhas = [
        f"üíª CPU: Processo {proc_cpu:.1f}% ‚Ä¢ Sistema: {sys_cpu:.1f}%",
        f"üíæ Mem√≥ria: {proc_mem:.1f}MB ‚Ä¢ Sistema: {sys_mem:.1f}%"
    ]
    bloco = format_block("üß† STATUS DO SISTEMA", linhas)

    getattr(self, level.lower())(f"\n{bloco}")

def logger_memory_snapshot(self: Logger) -> None:
    """
    Registra snapshot da mem√≥ria atual para compara√ß√£o posterior.
    
    Exemplo:
        logger.memory_snapshot()
    """
    self._monitor.take_memory_snapshot()
    self.debug("Snapshot de mem√≥ria registrado")

def logger_check_memory_leak(self: Logger, level: str = 'WARNING') -> None:
    """
    Verifica diferen√ßas de mem√≥ria desde o √∫ltimo snapshot.
    
    Args:
        level: N√≠vel de log para avisos de vazamento (padr√£o: WARNING)
    
    Exemplo:
        logger.check_memory_leak()
    """
    memory_diff, object_diff = self._monitor.get_memory_diff()
    
    if not memory_diff and not object_diff:
        self.debug("Nenhum vazamento de mem√≥ria detectado")
        return
    
    log_method = getattr(self, level.lower())
    message = [f"‚ö†Ô∏è Poss√≠vel vazamento de mem√≥ria detectado: {memory_diff:.1f}MB"]
    
    if object_diff:
        message.append("\nMudan√ßas nos objetos:")
        for obj_type, diff in object_diff.items():
            if abs(diff) > 10:  # Reporta apenas diferen√ßas significativas
                message.append(f"  {obj_type}: {diff:+d}")
    
    log_method('\n'.join(message))

def _setup_monitoring(logger: Logger) -> None:
    """
    Configura o sistema de monitoramento no logger.
    
    Args:
        logger: Inst√¢ncia do logger a ser configurada
    """
    monitor = SystemMonitor()
    setattr(logger, '_monitor', monitor)
    
    # Adiciona os m√©todos ao logger
    setattr(Logger, 'log_system_status', logger_log_system_status)
    setattr(Logger, 'memory_snapshot', logger_memory_snapshot)
    setattr(Logger, 'check_memory_leak', logger_check_memory_leak)

class ContextManager:
    """
    Gerenciador de contexto para logging hier√°rquico.
    Permite agrupar logs relacionados e criar uma hierarquia de execu√ß√£o.
    """
    def __init__(self):
        self._context_separator = ' ‚Üí '
    
    def get_current_context(self) -> str:
        """Retorna o contexto atual formatado."""
        contexts = _log_context.get()
        return self._context_separator.join(contexts) if contexts else ''
    
    @contextmanager
    def context(self, name: str):
        """
        Context manager para adicionar contexto tempor√°rio aos logs.
        
        Exemplo:
            with logger.context_manager.context('Processamento'):
                logger.info('Iniciando...')  # Ser√° logado com contexto
        """
        token = _log_context.set(_log_context.get() + [name])
        try:
            yield
        finally:
            _log_context.reset(token)

# Fun√ß√µes de contexto para o logger
def logger_context(self: Logger, name: str) -> contextmanager:
    """
    Adiciona contexto tempor√°rio aos logs.
        
    Exemplo:
        with logger.context('Opera√ß√£o'):
            logger.info('Processando...')  # Ser√° logado como: [Opera√ß√£o] Processando...
    """
    @contextmanager
    def context_wrapper():
        with self._context_manager.context(name):
            yield
    return context_wrapper()

# Fun√ß√£o para sobrescrever o m√©todo _log do logger para incluir informa√ß√µes de contexto
def log_with_context(self: Logger, level, msg, args, **kwargs):
    """
    Vers√£o modificada do m√©todo _log que inclui informa√ß√µes de contexto.
    Substitui o m√©todo padr√£o do logger para adicionar o contexto atual √†s mensagens.
    """
    context = self._context_manager.get_current_context()
    if context:
        msg = f"[{context}] {msg}"
    self._original_log(level, msg, args, **kwargs)


class Profiler:
    """
    Gerenciador de profiling para an√°lise de performance de c√≥digo.
    Utiliza cProfile para coletar m√©tricas detalhadas de execu√ß√£o.
    """
    def __init__(self):
        self.profiler = None
        self._active = False
    
    def start(self) -> None:
        """Inicia a coleta de m√©tricas de profiling."""
        if not self._active:
            self.profiler = cProfile.Profile()
            self.profiler.enable()
            self._active = True
    
    def stop(self) -> str:
        """
        Para a coleta de m√©tricas e retorna relat√≥rio formatado.
        
        Retorna:
            str: Relat√≥rio de profiling formatado
        """
        if not self._active:
            return "Profiler n√£o est√° ativo"
        
        self.profiler.disable()
        self._active = False
        
        s = io.StringIO()
        ps = pstats.Stats(self.profiler, stream=s).sort_stats('cumulative')
        ps.print_stats(20)  # Limita aos 20 itens mais relevantes
        return s.getvalue()


# Fun√ß√µes de profiling para o logger
@contextmanager
def logger_profile_cm(self: Logger, name: str = None) -> None:
    """
    Context manager para profiling de c√≥digo.
    
    Args:
        name: Nome da se√ß√£o a ser perfilada
        
    Exemplo:
        with logger.profile_cm('operacao'):
            # c√≥digo a ser analisado
    """
    section_name = name or 'Se√ß√£o'
    self.info(f"üîç Iniciando profiling: {section_name}")
    self._profiler.start()
    try:
        yield
    finally:
        report = self._profiler.stop()
        self.info(f"üìä Resultado do profiling ({section_name}):\n{report}")

def logger_profile(self: Logger, func: Optional[Callable] = None, *, name: str = None) -> Any:
    """
    Decorator para profiling de c√≥digo.
    
    Args:
        func: Fun√ß√£o a ser decorada
        name: Nome opcional para o perfil
        
    Exemplo:
        @logger.profile
        def funcao_pesada():
            ...
    """
    if func is None:
        # Se chamado sem fun√ß√£o, retorna o context manager diretamente
        return logger_profile_cm(self, name)
        
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        with logger_profile_cm(self, func.__name__):
            return func(*args, **kwargs)
    return wrapper

def _setup_context_and_profiling(logger: Logger) -> None:
    """
    Configura rastreamento de contexto e profiling no logger.
    
    Args:
        logger: Inst√¢ncia do logger a ser configurada
    """
    # Inicializa os gerenciadores
    context_manager = ContextManager()
    profiler = Profiler()
    
    # Armazena os gerenciadores no logger
    setattr(logger, '_context_manager', context_manager)
    setattr(logger, '_profiler', profiler)
    
    # Guarda refer√™ncia ao m√©todo _log original
    setattr(logger, '_original_log', logger._log)
    
    # Substitui o m√©todo _log
    setattr(Logger, '_log', log_with_context)
    
    # Adiciona os m√©todos ao logger
    setattr(Logger, 'context', logger_context)
    setattr(Logger, 'profile', logger_profile)
    setattr(Logger, 'profile_cm', logger_profile_cm)

class DependencyManager:
    """
    Gerenciador de informa√ß√µes sobre depend√™ncias e ambiente de execu√ß√£o.
    Coleta e formata informa√ß√µes sobre pacotes instalados e sistema.
    """
    def __init__(self):
        self._cached_info: Optional[Dict[str, Any]] = None
        self._last_update: float = 0
        self._cache_duration: int = 300  # 5 minutos
    
    def get_environment_info(self, force_update: bool = False) -> Dict[str, Any]:
        """
        Coleta informa√ß√µes sobre o ambiente de execu√ß√£o.
        
        Args:
            force_update: Se True, for√ßa atualiza√ß√£o do cache
        
        Returns:
            Dicion√°rio contendo informa√ß√µes sobre Python, sistema e pacotes
        """
        now = time.time()
        if self._cached_info and not force_update and (now - self._last_update) < self._cache_duration:
            return self._cached_info
        
        info = {
            'python': {
                'version': platform.python_version(),
                'implementation': platform.python_implementation(),
                'compiler': platform.python_compiler(),
                'build': platform.python_build(),
            },
            'system': {
                'os': platform.system(),
                'release': platform.release(),
                'machine': platform.machine(),
                'processor': platform.processor(),
                'node': platform.node(),
            },
            'packages': self._get_installed_packages()
        }
        
        self._cached_info = info
        self._last_update = now
        return info
    
    def _get_installed_packages(self) -> Dict[str, str]:
        """
        Retorna dicion√°rio com pacotes instalados e suas vers√µes.
        
        Returns:
            Dicion√°rio com nome do pacote como chave e vers√£o como valor
        """
        return {pkg.key: pkg.version for pkg in pkg_resources.working_set}

class NetworkMonitor:
    """
    Monitor de atividades de rede e m√©tricas de conex√£o.
    Rastreia requisi√ß√µes HTTP, lat√™ncia e erros de rede.
    """
    def __init__(self):
        self.metrics: Dict[str, Dict[str, Any]] = defaultdict(lambda: {
            'total_requests': 0,
            'total_errors': 0,
            'total_bytes': 0,
            'latencies': [],
        })
        self._executor = ThreadPoolExecutor(max_workers=5)
    
    def check_connection(self, host: str = "8.8.8.8", port: int = 53, timeout: float = 1.0) -> Tuple[bool, Optional[float]]:
        """
        Verifica conectividade com a internet.
        
        Args:
            host: Host para verificar conex√£o (padr√£o: servidor DNS do Google)
            port: Porta para conex√£o (padr√£o: 53)
            timeout: Tempo limite em segundos (padr√£o: 1.0)
            
        Returns:
            Tupla contendo (est√°_conectado, lat√™ncia_em_ms)
        """
        try:
            start = time.time()
            socket.create_connection((host, port), timeout=timeout)
            return True, (time.time() - start) * 1000
        except OSError:
            return False, None
    
    def measure_latency(self, url: str, timeout: float = 1.0) -> Dict[str, Any]:
        """
        Mede lat√™ncia para uma URL espec√≠fica.
        
        Args:
            url: URL para medir lat√™ncia
            timeout: Tempo limite em segundos (padr√£o: 1.0)
            
        Returns:
            Dicion√°rio contendo m√©tricas de lat√™ncia ou erro
        """
        try:
            start = time.time()
            response = requests.get(url, timeout=timeout)
            latency = (time.time() - start) * 1000
            
            domain = urlparse(url).netloc
            metrics = self.metrics[domain]
            metrics['total_requests'] += 1
            metrics['latencies'].append(latency)
            metrics['total_bytes'] += len(response.content)
            
            if len(metrics['latencies']) > 100:
                metrics['latencies'] = metrics['latencies'][-100:]
            
            return {
                'latency': latency,
                'status_code': response.status_code,
                'content_size': len(response.content),
            }
        except requests.RequestException as e:
            domain = urlparse(url).netloc
            self.metrics[domain]['total_errors'] += 1
            return {
                'error': str(e),
                'type': type(e).__name__
            }

# Fun√ß√µes de depend√™ncias e rede para o logger
def logger_log_environment(self: Logger, level: str = 'INFO') -> None:
    """
    Registra informa√ß√µes detalhadas sobre o ambiente de execu√ß√£o.
    
    Args:
        level: N√≠vel de log para as informa√ß√µes (padr√£o: INFO)
    
    Exemplo:
        logger.log_environment()
    """
    info = self._dep_manager.get_environment_info()
    log_method = getattr(self, level.lower())

    linhas = [
        f"Python {info['python']['version']} ({info['python']['implementation']})",
        f"SO: {info['system']['os']} {info['system']['release']} ({info['system']['machine']})",
        "Pacotes Principais:"
    ]

    important = ['requests', 'psutil', 'colorama', 'pyautogui']
    for pkg in important:
        if pkg in info['packages']:
            linhas.append(f"  - {pkg}: {info['packages'][pkg]}")

    bloco = format_block("üîß AMBIENTE", linhas)
    log_method(f"\n{bloco}")

def logger_check_connectivity(self: Logger, url: str = None, level: str = 'INFO', timeout: float = 1.0) -> None:
    """
    Verifica e registra status da conectividade.
    
    Args:
        url: URL opcional para testar conectividade espec√≠fica
        level: N√≠vel de log para o resultado (padr√£o: INFO)
        timeout: Timeout em segundos para as verifica√ß√µes de rede (padr√£o: 1.0)
    
    Exemplo:
        logger.check_connectivity('https://api.exemplo.com')
    """
    # Verifica conex√£o b√°sica com timeout reduzido
    connected, latency = self._net_monitor.check_connection(timeout=timeout)
    log_method = getattr(self, level.lower())

    linhas = []
    if connected:
        linhas.append(f"Status: ‚úÖ Conectado ‚Ä¢ Lat√™ncia: {latency:.1f}ms")
    else:
        linhas.append("‚ùå Sem conex√£o com a internet")

    if url:
        try:
            metrics = self._net_monitor.measure_latency(url, timeout=timeout)
            if 'latency' in metrics:
                linhas.append(f"URL Testada: {url}")
                linhas.append(f"‚Ü≥ Lat√™ncia: {metrics['latency']:.1f}ms ‚Ä¢ Status: {metrics['status_code']} ‚Ä¢ Tamanho: {metrics['content_size']/1024:.1f}KB")
            else:
                linhas.append(f"‚ùå Erro ao acessar {url}: {metrics['error']}")
        except Exception as e:
            linhas.append(f"‚ùå Erro ao testar {url}: {str(e)}")

    bloco = format_block("üåê CONECTIVIDADE", linhas)
    log_method(f"\n{bloco}")

def logger_get_network_metrics(self: Logger, domain: str = None) -> Dict[str, Any]:
    """
    Retorna m√©tricas de rede coletadas.
    
    Args:
        domain: Dom√≠nio espec√≠fico para obter m√©tricas (opcional)
    
    Returns:
        Dicion√°rio contendo m√©tricas de rede
    
    Exemplo:
        metrics = logger.get_network_metrics('api.exemplo.com')
    """
    if domain:
        metrics = self._net_monitor.metrics[domain]
        if metrics['latencies']:
            avg_latency = sum(metrics['latencies']) / len(metrics['latencies'])
            metrics['average_latency'] = avg_latency
        return metrics
    return dict(self._net_monitor.metrics)

def _setup_dependencies_and_network(logger: Logger) -> None:
    """
    Configura monitoramento de depend√™ncias e rede no logger.
    
    Args:
        logger: Inst√¢ncia do logger a ser configurada
    """
    dep_manager = DependencyManager()
    net_monitor = NetworkMonitor()
    
    setattr(logger, '_dep_manager', dep_manager)
    setattr(logger, '_net_monitor', net_monitor)
    
    # Adiciona os m√©todos ao logger
    setattr(Logger, 'log_environment', logger_log_environment)
    setattr(Logger, 'check_connectivity', logger_check_connectivity)
    setattr(Logger, 'get_network_metrics', logger_get_network_metrics)

def logger_sleep(self: Logger, duration: float, unit: str = 's', level: str = 'DEBUG', message: str = None) -> None:
    """
    Pausa a execu√ß√£o pelo tempo especificado e registra a pausa no log.
    
    Args:
        duration: Dura√ß√£o da pausa
        unit: Unidade de tempo ('s'=segundos, 'ms'=milissegundos, 'min'=minutos, 'h'=horas)
        level: N√≠vel de log para as mensagens (padr√£o: DEBUG)
        message: Mensagem opcional para explicar a pausa
    
    Exemplo:
        logger.sleep(2.5)                # Espera 2.5 segundos
        logger.sleep(500, unit='ms')     # Espera 500 milissegundos
        logger.sleep(1, unit='min')      # Espera 1 minuto
        logger.sleep(2, message="Aguardando conex√£o")  # Com mensagem explicativa
    """
    # Converter para segundos com base na unidade
    seconds = duration
    unit_name = "segundo(s)"
    
    if unit == 'ms':
        seconds = duration / 1000
        unit_name = "milissegundo(s)"
    elif unit == 'min':
        seconds = duration * 60
        unit_name = "minuto(s)"
    elif unit == 'h':
        seconds = duration * 3600
        unit_name = "hora(s)"
    
    # Criar mensagem de log
    msg = message or f"Aguardando {duration} {unit_name}"
    log_method = getattr(self, level.lower())
    
    # Registrar in√≠cio, fazer pausa e registrar fim
    log_method(f"‚è≥ {msg}")
    start = time.time()
    time.sleep(seconds)
    elapsed = time.time() - start
    # log_method(f"‚åõ {msg} - conclu√≠do em {elapsed:.2f}s")
    
    return None

class LoggerProgressBar:
    """
    Barra de progresso integrada ao logger, inspirada na biblioteca tqdm.
    
    Caracter√≠sticas:
    - Exibe barra de progresso no console
    - Registra atualiza√ß√µes peri√≥dicas no log
    - Compat√≠vel com outras mensagens de log durante a opera√ß√£o
    - Funciona como iterador e context manager
    - Suporta atualiza√ß√µes manuais (m√©todo update)
    """
    def __init__(self, 
                 logger: Logger,
                 total: int = None,
                 desc: str = '',
                 leave: bool = True,
                 unit: str = 'it',
                 log_interval: float = 1.0,
                 log_level: str = 'INFO'):
        """
        Inicializa a barra de progresso.
        
        Args:
            logger: Inst√¢ncia do logger para registrar o progresso
            total: Total de itera√ß√µes (opcional para context manager)
            desc: Descri√ß√£o da opera√ß√£o
            leave: Se True, mant√©m a barra ap√≥s completar
            unit: Unidade das itera√ß√µes (ex: 'it', 'files', 'MB')
            log_interval: Intervalo m√≠nimo (segundos) entre atualiza√ß√µes no log
            log_level: N√≠vel de log para as mensagens de progresso
        """
        self.logger = logger
        self.total = total
        self.desc = desc
        self.leave = leave
        self.unit = unit
        self.log_interval = log_interval
        self.log_level = log_level
        
        # Estado interno
        self.n = 0
        self.start_time = time.time()
        self.last_log_time = self.start_time
        self.last_print_n = 0
        self.last_print_time = self.start_time
        self.closed = False
        self.display_threshold = 0.05  # Atualiza exibi√ß√£o ap√≥s 5% de progresso
        self.last_line_len = 0  # Para rastrear o tamanho da √∫ltima linha impressa
        self.bar_position = 0   # Para rastrear a posi√ß√£o da barra no console
        
        # Iniciar
        self._log_progress(initial=True)
    
    def update(self, n: int = 1) -> None:
        """
        Atualiza o progresso incrementando n unidades.
        
        Args:
            n: N√∫mero de unidades a incrementar
        """
        if self.closed:
            return
            
        self.n += n
        now = time.time()
        
        # Decide se deve atualizar o log (menos frequente)
        if (now - self.last_log_time >= self.log_interval or 
            self.n == self.total):
            self._log_progress()
            self.last_log_time = now
            # Garante que a barra seja redesenhada ap√≥s enviar log
            self._print_progress()
            return
        
        # Atualiza a exibi√ß√£o no console com mais frequ√™ncia, mas n√£o a cada chamada
        # para evitar sobrecarga de E/S
        if self.n == self.total or now - self.last_print_time >= 0.2:  # Atualiza√ß√£o a cada 200ms
            self._print_progress()
            self.last_print_time = now
    
    def close(self) -> None:
        """Finaliza a barra de progresso."""
        if not self.closed:
            self.closed = True
            self._log_progress(final=True)
            self._print_progress(final=True)

    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.closed:
            raise StopIteration
        return self
    
    def __call__(self, iterable):
        """
        Envolve um iter√°vel para mostrar o progresso.
        
        Args:
            iterable: O iter√°vel a ser processado
            
        Returns:
            Um iterador que atualiza a barra de progresso
        """
        # Tenta obter o comprimento do iter√°vel se total n√£o foi informado
        if self.total is None:
            try:
                self.total = len(iterable)
            except (TypeError, AttributeError):
                # Se n√£o conseguir, tentamos converter para lista primeiro
                try:
                    iterable = list(iterable)
                    self.total = len(iterable)
                except:
                    # Se tudo falhar, n√£o definimos o total
                    pass
                    
        # Adiciona uma mensagem inicial no log
        self._log_progress(initial=True)
        
        for obj in iterable:
            yield obj
            self.update(1)
        
        self.close()
    
    def _format_time(self, seconds: float) -> str:
        """Formata o tempo em uma string leg√≠vel."""
        if seconds < 60:
            return f"{seconds:.1f}s"
        elif seconds < 3600:
            return f"{seconds/60:.1f}min"
        else:
            return f"{seconds/3600:.1f}h"
    
    def _format_bar(self, pct: float, width: int = 20) -> str:
        """Cria uma barra de progresso visual."""
        filled = int(width * pct)
        bar = '‚ñà' * filled + '‚ñë' * (width - filled)
        return bar
    
    def _get_progress_info(self) -> dict:
        """Calcula e retorna informa√ß√µes sobre o progresso atual."""
        now = time.time()
        elapsed = now - self.start_time
        
        # Evita divis√£o por zero
        if self.total is None or self.total == 0:
            pct = 0
            rate = 0
            remaining = 0
        else:
            pct = self.n / self.total
            rate = self.n / elapsed if elapsed > 0 else 0
            remaining = (self.total - self.n) / rate if rate > 0 else 0
        
        return {
            'count': self.n,
            'total': self.total,
            'pct': pct * 100,
            'bar': self._format_bar(pct),
            'elapsed': elapsed,
            'elapsed_str': self._format_time(elapsed),
            'remaining': remaining,
            'remaining_str': self._format_time(remaining),
            'rate': rate,
            'rate_str': f"{rate:.1f} {self.unit}/s"
        }
    
    def _log_progress(self, initial: bool = False, final: bool = False) -> None:
        """Registra o progresso no log."""
        info = self._get_progress_info()
        
        if initial:
            message = f"‚è±Ô∏è Iniciando: {self.desc} (0/{info['total']} {self.unit})"
        elif final:
            message = f"‚úÖ Conclu√≠do: {self.desc} ({info['count']}/{info['total']} {self.unit}) em {info['elapsed_str']}"
        else:
            # Inclui a barra visual nos arquivos de log
            message = (f"üìä {self.desc}: [{info['bar']}] "
                      f"{info['count']}/{info['total']} {self.unit} "
                      f"({info['pct']:.1f}%) ‚Ä¢ Taxa: {info['rate_str']} "
                      f"‚Ä¢ Restante: {info['remaining_str']}")
        
        log_method = getattr(self.logger, self.log_level.lower())
        log_method(message)
    
    def _print_progress(self, final: bool = False) -> None:
        """Atualiza a barra de progresso no console."""
        if not sys.stdout.isatty():
            return  # N√£o mostra barra interativa se n√£o estiver em um terminal
        
        info = self._get_progress_info()
        
        # Limpa qualquer conte√∫do na linha atual
        sys.stdout.write('\r' + ' ' * self.last_line_len + '\r')
        
        line = (f"{self.desc}: [{info['bar']}] "
               f"{info['count']}/{info['total']} "
               f"({info['pct']:.1f}%) {info['rate_str']} "
               f"‚Ä¢ Restante: {info['remaining_str']}")
        
        # Limita o tamanho da linha
        max_len = 80
        if len(line) > max_len:
            line = line[:max_len-3] + "..."
            
        # Atualiza o tamanho da √∫ltima linha
        self.last_line_len = len(line)
            
        sys.stdout.write(line)
        sys.stdout.flush()
        
        # Se for a linha final, adiciona uma quebra de linha
        if final and self.leave:
            sys.stdout.write('\n')
            sys.stdout.flush()


def logger_progress(self: Logger, 
                   iterable = None, 
                   total: int = None, 
                   desc: str = '', 
                   leave: bool = True,
                   unit: str = 'it',
                   log_interval: float = 1.0,
                   log_level: str = 'INFO') -> LoggerProgressBar:
    """
    Cria uma barra de progresso integrada ao logger.
    
    Pode ser usado de tr√™s formas:
    1. Como wrapper para um iter√°vel:
       for item in logger.progress(items, desc="Processando"):
           process(item)
    
    2. Como context manager com total definido:
       with logger.progress(total=100, desc="Baixando") as pbar:
           for chunk in download_chunks():
               pbar.update(len(chunk))
    
    3. Para atualiza√ß√µes manuais:
       pbar = logger.progress(desc="Processando")
       pbar.update()
       pbar.close()
    
    Args:
        iterable: Iter√°vel para processar (opcional)
        total: Total de itera√ß√µes (necess√°rio se n√£o fornecer iter√°vel)
        desc: Descri√ß√£o da opera√ß√£o
        leave: Se True, mant√©m a barra ap√≥s completar
        unit: Unidade das itera√ß√µes (ex: 'it', 'files', 'MB')
        log_interval: Intervalo m√≠nimo (segundos) entre registros no log
        log_level: N√≠vel de log para mensagens de progresso
        
    Returns:
        Um objeto LoggerProgressBar
    """
    pbar = LoggerProgressBar(
        logger=self,
        total=total,
        desc=desc,
        leave=leave,
        unit=unit,
        log_interval=log_interval,
        log_level=log_level
    )
    
    if iterable is not None:
        return pbar(iterable)
    return pbar


class PrintCapture:
    """
    Captura chamadas √† fun√ß√£o print() e redireciona para o logger.
    
    Esta classe salva a fun√ß√£o print() original e a substitui por uma vers√£o
    que envia as mensagens para um logger espec√≠fico.
    """
    def __init__(self):
        self.original_print = None
        self.logger = None
        self.log_level = 'INFO'
        self.prefix = ''
        self.active = False
    
    def start_capture(self, logger, level='WARNING', prefix='üëâ Print(): '):
        """
        Inicia a captura de print(), redirecionando para o logger.
        
        Args:
            logger: Inst√¢ncia do logger para receber as mensagens
            level: N√≠vel de log a usar (padr√£o: WARNING)
            prefix: Prefixo para adicionar √†s mensagens (para distinguir prints)
        """
        if self.active:
            return
            
        self.logger = logger
        self.log_level = level
        self.prefix = prefix
        self.active = True
        
        # Salva a fun√ß√£o print original e substitui
        if self.original_print is None:
            self.original_print = builtins.print
        
        # Define a nova fun√ß√£o print
        def new_print(*args, **kwargs):
            # Extrai par√¢metros do print original
            file = kwargs.get('file', sys.stdout)
            sep = kwargs.get('sep', ' ')
            end = kwargs.get('end', '\n')
            flush = kwargs.get('flush', False)
            
            # Se o destino n√£o √© stdout, usa o print original
            if file is not sys.stdout:
                return self.original_print(*args, file=file, sep=sep, end=end, flush=flush)
            
            # Constr√≥i a mensagem como o print faria
            message = sep.join(str(arg) for arg in args)
            
            # Envia para o logger
            log_method = getattr(self.logger, self.log_level.lower())
            log_method(f"-------------- ‚ùå Evite o Uso de Print ‚ùå --------------")
            log_method(f"{self.prefix}{message}")
            log_method(f"---------------------------------------------------------")

            # Se end n√£o √© newline, precisa imprimir mesmo assim para 
            # manter comportamento esperado em aplica√ß√µes interativas
            if end != '\n':
                self.original_print(*args, sep=sep, end=end, flush=flush)
                
        # Substitui a fun√ß√£o print global
        builtins.print = new_print
    
    def stop_capture(self):
        """Restaura a fun√ß√£o print original."""
        if self.original_print and self.active:
            builtins.print = self.original_print
            self.active = False


# Inst√¢ncia global √∫nica
print_capture = PrintCapture()


def logger_capture_prints(self: Logger, active: bool = True, level: str = 'INFO', prefix: str = 'üëâ Print: '):
    """
    Ativa ou desativa a captura de print() para este logger.
    
    Quando ativada, todas as chamadas a print() ser√£o redirecionadas para o logger.
    
    Args:
        active: Se True, ativa a captura; se False, restaura print() original
        level: N√≠vel de log para as mensagens capturadas (padr√£o: INFO)
        prefix: Prefixo para adicionar √†s mensagens capturadas
        
    Exemplo:
        logger.capture_prints(True)   # Ativa captura
        print("Teste")                # Ser√° registrado no logger
        logger.capture_prints(False)  # Desativa captura
    """
    if active:
        print_capture.start_capture(self, level=level, prefix=prefix)
    else:
        print_capture.stop_capture()


def _setup_utility_functions(logger: Logger) -> None:
    """
    Configura fun√ß√µes utilit√°rias no logger.
    
    Args:
        logger: Inst√¢ncia do logger a ser configurada
    """
    # Adiciona os m√©todos ao logger
    setattr(Logger, 'sleep', logger_sleep)
    setattr(Logger, 'progress', logger_progress)
    setattr(Logger, 'capture_prints', logger_capture_prints)
    
    # Importa builtins para a captura de print
    global builtins
    import builtins


def start_logger(name: str = None, log_dir: str = 'Logs', split_debug: bool = False, console_level: str = 'INFO', file_level: str = 'DEBUG') -> Logger:
    """
    Configura e inicializa um sistema de logging avan√ßado com m√∫ltiplas funcionalidades.
    
    Args:
        name: Nome base para o logger e arquivos de log (opcional)
        log_dir: Diret√≥rio base para armazenar os logs (padr√£o: 'Logs')
        split_debug: Se True, separa logs de debug em arquivo pr√≥prio (padr√£o: False)
        console_level: N√≠vel de log para o console (padr√£o: 'INFO')
        file_level: N√≠vel de log para o arquivo (padr√£o: 'DEBUG')
    
    Returns:
        Logger: Inst√¢ncia configurada do logger com todos os recursos habilitados
    
    Exemplo:
        logger = start_logger('MeuApp')
        logger.start()
        logger.info('Iniciando processamento...')
        logger.end()
    """
    logger = _configure_base_logger(name, log_dir, split_debug, console_level, file_level)
    _setup_metrics(logger)
    _setup_monitoring(logger)
    _setup_context_and_profiling(logger)
    _setup_dependencies_and_network(logger)
    _setup_utility_functions(logger)
    return logger

def _configure_base_logger(name: str, log_dir: str, split_debug: bool, console_level: str = 'INFO', file_level: str = 'DEBUG') -> Logger:
    """
    Configura as funcionalidades base do logger.
    
    Args:
        name: Nome base para o logger e arquivos de log
        log_dir: Diret√≥rio base para armazenar os logs
        split_debug: Se True, separa logs de debug em arquivo pr√≥prio
        console_level: N√≠vel de log para o console (padr√£o: 'INFO')
        file_level: N√≠vel de log para o arquivo (padr√£o: 'DEBUG')
    
    Returns:
        Logger configurado com funcionalidades b√°sicas
    """
    _init_colorama()
    _define_custom_levels()

    # Converte as strings de n√≠veis para constantes do logging
    console_level_value = getattr(logging, console_level)
    file_level_value = getattr(logging, file_level)

    base = Path(log_dir)
    screen_dir, debug_dir = _setup_directories(base, split_debug)
    filename = _get_log_filename(name)

    logging.setLoggerClass(AutomaticTracebackLogger)
    logger = logging.getLogger(name)
    logger.setLevel(console_level_value)
    logger.handlers.clear()

    # Configura√ß√£o dos handlers e formatters
    datefmt = '%Y-%m-%d %H:%M:%S'
    console_fmt = (
    "{asctime} {emoji} {levelname_color}{levelpad}- {message} {thread_disp}"
    )
    file_fmt = (
        "{asctime} {emoji} {levelname}{levelpad}- {message} <> "
        "     [{pathname}:{lineno}] - [Cadeia de Funcoes: {call_chain}üìç] {thread_disp}"
    )

    # Console handler (colorido)
    ch = StreamHandler()
    ch.setFormatter(CustomFormatter(fmt=console_fmt, datefmt=datefmt, style='{'))
    logger.addHandler(ch)

    # File handlers (sem cores ANSI)
    formatter = Formatter(fmt=file_fmt, datefmt=datefmt, style='{')
    if split_debug:
        fh_dbg = FileHandler(debug_dir / filename, encoding='utf-8')
        fh_dbg.setLevel(logging.DEBUG)
        fh_dbg.setFormatter(formatter)
        logger.addHandler(fh_dbg)

        fh_info = FileHandler(base / filename, encoding='utf-8')
        fh_info.setLevel(logging.INFO)
        fh_info.setFormatter(formatter)
        logger.addHandler(fh_info)
    else:
        fh = FileHandler(base / filename, encoding='utf-8')
        fh.setLevel(file_level_value)
        fh.setFormatter(formatter)
        logger.addHandler(fh)

    
    # M√©todos extras
    def _screen(self: Logger, msg: str, *args, webdriver=None, **kwargs) -> None:
        """
        Captura e registra uma screenshot com uma mensagem.
        
        Args:
            msg: Mensagem para registrar com a screenshot
            webdriver: Inst√¢ncia opcional do Selenium WebDriver
        """
        _attach_screenshot(self, name or 'log', screen_dir, webdriver)
        self.log(35, msg, *args, stacklevel=2, **kwargs)

    setattr(Logger, 'screen', _screen)
    setattr(Logger, 'start', _log_start)
    setattr(Logger, 'end', _log_end)

    # Armazena caminho do arquivo de log atual no logger
    file_path = base / filename
    setattr(logger, 'log_path', str(file_path))

    # M√©todo cleanup para limpar o console
    def _cleanup(self: Logger) -> None:
        """Limpa o console."""
        cmd = 'cls' if os.name == 'nt' else 'clear'
        os.system(cmd)
    setattr(Logger, 'cleanup', _cleanup)

    # M√©todo path para retornar o caminho do log atual
    def _path(self: Logger) -> str:
        """
        Retorna o caminho do arquivo de log atual.
        
        Returns:
            Caminho completo para o arquivo de log
        """
        return getattr(self, 'log_path', None)
    setattr(Logger, 'path', _path)

    # M√©todo para pausar a execu√ß√£o com um input
    def _pause(self: Logger, msg: str = "Digite algo para continuar... ") -> str:
        """
        Pausa a execu√ß√£o e aguarda input do usu√°rio.
        
        Args:
            msg: Mensagem a ser exibida (padr√£o: "Digite algo para continuar... ")
            
        Returns:
            Texto digitado pelo usu√°rio
        """
        resp = input(msg)
        # registrando a resposta no log
        self.debug(f"Resposta do usu√°rio: {resp}")
        return resp
    setattr(Logger, 'pause', _pause)

    return logger

def funcao3():
    logger.info("teste funcao 3")

def funcao2():
    logger.info("teste funcao 2")
    funcao3()

def funcao1():
    logger.info("teste funcao 1")
    funcao2()

if __name__ == '__main__':
    logger = start_logger("Exemplo", split_debug=True)

    # Inicia o logger com configura√ß√µes padr√£o
    logger.start()

    with logger.context("Etapa A"):
        with logger.timer("tempo_total"):
            logger.info("üîç Processando...")
            
            # Usando logger.sleep em vez de time.sleep
            logger.sleep(1.5, message="Processamento simulado")
            logger.count("eventos_lidos")

            # Exemplo 1: Usando progress como iterador
            logger.info("Iniciando processamento sequencial...")
            for i in logger.progress(range(100), desc="Iterando itens", unit="items"):
                logger.sleep(0.1, message=f"Processando item {i}")
                logger.count("eventos_lidos")
            
            # Exemplo 2: Usando progress como context manager
            logger.info("Iniciando download simulado...")
            with logger.progress(total=100, desc="Download", unit="MB") as pbar:
                for i in range(10):
                    # Simula download em partes
                    logger.sleep(0.2, message=f"Baixando parte {i+1}")
                    pbar.update(10)  # Atualiza 10MB por vez
                    
                    # Podemos ter outros logs durante o progresso
                    if i % 3 == 0:
                        logger.info(f"Verificando parte {i+1}")

            # Exemplo 3 : Metricas
            logger.report_metrics()

    # Ativa a captura de prints
    logger.capture_prints(True)
    print("Teste")

    print("Teste 2")
    print("Teste 3")        
    print("Teste 3")        
    print("Teste 3")        
    print("Teste 3")        
    print("Teste 3")        
    print("Teste 3")        
    print("Teste 3")        
    print("Teste 3")        
    logger.sleep(1)
    
    # Teste de conectividade com timeout curto
    logger.check_connectivity("https://google.com", timeout=0.5)

    funcao1()
    
    # Finaliza o logger
    logger.end()
